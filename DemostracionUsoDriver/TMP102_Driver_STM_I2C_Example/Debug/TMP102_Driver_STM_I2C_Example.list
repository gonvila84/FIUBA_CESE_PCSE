
TMP102_Driver_STM_I2C_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e7c  08005e7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e84  08005e84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000854  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013643  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002463  00000000  00000000  000336e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00036ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002619d  00000000  00000000  00037948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012617  00000000  00000000  0005dae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea383  00000000  00000000  000700fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a47f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046dc  00000000  00000000  0015a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005da8 	.word	0x08005da8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005da8 	.word	0x08005da8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800091c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000920:	f000 b974 	b.w	8000c0c <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468e      	mov	lr, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14d      	bne.n	80009e6 <__udivmoddi4+0xaa>
 800094a:	428a      	cmp	r2, r1
 800094c:	4694      	mov	ip, r2
 800094e:	d969      	bls.n	8000a24 <__udivmoddi4+0xe8>
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	b152      	cbz	r2, 800096c <__udivmoddi4+0x30>
 8000956:	fa01 f302 	lsl.w	r3, r1, r2
 800095a:	f1c2 0120 	rsb	r1, r2, #32
 800095e:	fa20 f101 	lsr.w	r1, r0, r1
 8000962:	fa0c fc02 	lsl.w	ip, ip, r2
 8000966:	ea41 0e03 	orr.w	lr, r1, r3
 800096a:	4094      	lsls	r4, r2
 800096c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000970:	0c21      	lsrs	r1, r4, #16
 8000972:	fbbe f6f8 	udiv	r6, lr, r8
 8000976:	fa1f f78c 	uxth.w	r7, ip
 800097a:	fb08 e316 	mls	r3, r8, r6, lr
 800097e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000982:	fb06 f107 	mul.w	r1, r6, r7
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000992:	f080 811f 	bcs.w	8000bd4 <__udivmoddi4+0x298>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 811c 	bls.w	8000bd4 <__udivmoddi4+0x298>
 800099c:	3e02      	subs	r6, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x92>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009c0:	f080 810a 	bcs.w	8000bd8 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8107 	bls.w	8000bd8 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d2:	1be4      	subs	r4, r4, r7
 80009d4:	2600      	movs	r6, #0
 80009d6:	b11d      	cbz	r5, 80009e0 <__udivmoddi4+0xa4>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c5 4300 	strd	r4, r3, [r5]
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0xc2>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	f000 80ef 	beq.w	8000bce <__udivmoddi4+0x292>
 80009f0:	2600      	movs	r6, #0
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	4630      	mov	r0, r6
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	fab3 f683 	clz	r6, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d14a      	bne.n	8000a9c <__udivmoddi4+0x160>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d302      	bcc.n	8000a10 <__udivmoddi4+0xd4>
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	f200 80f9 	bhi.w	8000c02 <__udivmoddi4+0x2c6>
 8000a10:	1a84      	subs	r4, r0, r2
 8000a12:	eb61 0303 	sbc.w	r3, r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	469e      	mov	lr, r3
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e0      	beq.n	80009e0 <__udivmoddi4+0xa4>
 8000a1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a22:	e7dd      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000a24:	b902      	cbnz	r2, 8000a28 <__udivmoddi4+0xec>
 8000a26:	deff      	udf	#255	; 0xff
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f040 8092 	bne.w	8000b56 <__udivmoddi4+0x21a>
 8000a32:	eba1 010c 	sub.w	r1, r1, ip
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	2601      	movs	r6, #1
 8000a40:	0c20      	lsrs	r0, r4, #16
 8000a42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a46:	fb07 1113 	mls	r1, r7, r3, r1
 8000a4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a4e:	fb0e f003 	mul.w	r0, lr, r3
 8000a52:	4288      	cmp	r0, r1
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x12c>
 8000a56:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x12a>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f200 80cb 	bhi.w	8000bfc <__udivmoddi4+0x2c0>
 8000a66:	4643      	mov	r3, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a70:	fb07 1110 	mls	r1, r7, r0, r1
 8000a74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a78:	fb0e fe00 	mul.w	lr, lr, r0
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x156>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x154>
 8000a8a:	45a6      	cmp	lr, r4
 8000a8c:	f200 80bb 	bhi.w	8000c06 <__udivmoddi4+0x2ca>
 8000a90:	4608      	mov	r0, r1
 8000a92:	eba4 040e 	sub.w	r4, r4, lr
 8000a96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9a:	e79c      	b.n	80009d6 <__udivmoddi4+0x9a>
 8000a9c:	f1c6 0720 	rsb	r7, r6, #32
 8000aa0:	40b3      	lsls	r3, r6
 8000aa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aaa:	fa20 f407 	lsr.w	r4, r0, r7
 8000aae:	fa01 f306 	lsl.w	r3, r1, r6
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aba:	fa00 f306 	lsl.w	r3, r0, r6
 8000abe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ac2:	0c20      	lsrs	r0, r4, #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	fb09 1118 	mls	r1, r9, r8, r1
 8000acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	fa02 f206 	lsl.w	r2, r2, r6
 8000ada:	d90b      	bls.n	8000af4 <__udivmoddi4+0x1b8>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ae4:	f080 8088 	bcs.w	8000bf8 <__udivmoddi4+0x2bc>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f240 8085 	bls.w	8000bf8 <__udivmoddi4+0x2bc>
 8000aee:	f1a8 0802 	sub.w	r8, r8, #2
 8000af2:	4461      	add	r1, ip
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000afc:	fb09 1110 	mls	r1, r9, r0, r1
 8000b00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	458e      	cmp	lr, r1
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x1e2>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b14:	d26c      	bcs.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b16:	458e      	cmp	lr, r1
 8000b18:	d96a      	bls.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4461      	add	r1, ip
 8000b1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b22:	fba0 9402 	umull	r9, r4, r0, r2
 8000b26:	eba1 010e 	sub.w	r1, r1, lr
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	46c8      	mov	r8, r9
 8000b2e:	46a6      	mov	lr, r4
 8000b30:	d356      	bcc.n	8000be0 <__udivmoddi4+0x2a4>
 8000b32:	d053      	beq.n	8000bdc <__udivmoddi4+0x2a0>
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x212>
 8000b36:	ebb3 0208 	subs.w	r2, r3, r8
 8000b3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b42:	fa22 f306 	lsr.w	r3, r2, r6
 8000b46:	40f1      	lsrs	r1, r6
 8000b48:	431f      	orrs	r7, r3
 8000b4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	fa21 f303 	lsr.w	r3, r1, r3
 8000b64:	4091      	lsls	r1, r2
 8000b66:	4301      	orrs	r1, r0
 8000b68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b74:	fb07 3610 	mls	r6, r7, r0, r3
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b82:	429e      	cmp	r6, r3
 8000b84:	fa04 f402 	lsl.w	r4, r4, r2
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x260>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b92:	d22f      	bcs.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d92d      	bls.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ba4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bac:	fb06 f30e 	mul.w	r3, r6, lr
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x28a>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bbc:	d216      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d914      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000bc2:	3e02      	subs	r6, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bcc:	e738      	b.n	8000a40 <__udivmoddi4+0x104>
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e705      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e3      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6f8      	b.n	80009ce <__udivmoddi4+0x92>
 8000bdc:	454b      	cmp	r3, r9
 8000bde:	d2a9      	bcs.n	8000b34 <__udivmoddi4+0x1f8>
 8000be0:	ebb9 0802 	subs.w	r8, r9, r2
 8000be4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7a3      	b.n	8000b34 <__udivmoddi4+0x1f8>
 8000bec:	4646      	mov	r6, r8
 8000bee:	e7ea      	b.n	8000bc6 <__udivmoddi4+0x28a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	e794      	b.n	8000b1e <__udivmoddi4+0x1e2>
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	e7d1      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bf8:	46d0      	mov	r8, sl
 8000bfa:	e77b      	b.n	8000af4 <__udivmoddi4+0x1b8>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	e732      	b.n	8000a68 <__udivmoddi4+0x12c>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e709      	b.n	8000a1a <__udivmoddi4+0xde>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	e742      	b.n	8000a92 <__udivmoddi4+0x156>

08000c0c <__aeabi_idiv0>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <TMP102_InitDriver>:
 *Realiza las llamadas correspondientes al port para iniciar el driver I2C
 *@param tmp102measureUnit_t
 *@return tmp102configResult_t
 */
tmp102configResult_t TMP102_InitDriver(tmp102measureUnit_t measureUnit)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	tmp102configResult_t initReturnCode;
	TMP102_SetTemperatureMeasureUnit(measureUnit);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f81b 	bl	8000c58 <TMP102_SetTemperatureMeasureUnit>
	if (TMP102_CONFIG_SUCCESS == TMP102_Port_I2C_Init_Handler())
 8000c22:	f000 f8d1 	bl	8000dc8 <TMP102_Port_I2C_Init_Handler>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <TMP102_InitDriver+0x22>
	{
		initReturnCode = TMP102_CONFIG_SUCCESS;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e001      	b.n	8000c36 <TMP102_InitDriver+0x26>
	}
	else
	{
		initReturnCode = TMP102_CONFIG_FAIL;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
	}
	return initReturnCode;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <TMP102_GetTemperatureMeasureUnit>:
/**
 * @brief Permite obtener la unidad de medición de la temperatura en uso
 * @return tmp102measureUnit_t
 */
tmp102measureUnit_t	TMP102_GetTemperatureMeasureUnit ()
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	return tmp102DriverControl.tempMeasureUnit;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <TMP102_GetTemperatureMeasureUnit+0x14>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000008c 	.word	0x2000008c

08000c58 <TMP102_SetTemperatureMeasureUnit>:
/**
 * @brief Permite modificar la unidad de medición de la temperatura en forma dinámica tras el inicio del driver
 * @param tmp102measureUnit_t
 */
void TMP102_SetTemperatureMeasureUnit(tmp102measureUnit_t resultMeasureUnit)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	tmp102DriverControl.tempMeasureUnit = resultMeasureUnit;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <TMP102_SetTemperatureMeasureUnit+0x1c>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	7013      	strb	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <TMP102_GetTemperature>:
 * @brief Invoca las transacciones necesarias con el port especifico para obtener la temperatura
 * @param tmp102temperature_t  *
 * @return tmp102opsResult_t
 */
tmp102opsResult_t	TMP102_GetTemperature(tmp102temperature_t * temperature)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	tmp102opsResult_t opsResult;
	tmp102transmissionPayload_t payload [2] = {TMP102_TEMP_REGISTER};
 8000c80:	2300      	movs	r3, #0
 8000c82:	81bb      	strh	r3, [r7, #12]
 8000c84:	2300      	movs	r3, #0
 8000c86:	733b      	strb	r3, [r7, #12]
	if (TMP102_SEND_SUCCESS == TMP102_Port_I2C_Send	(TMP102_ADDRESS,payload,TMP102_TRANSMISSION_TIMEOUT))
 8000c88:	2090      	movs	r0, #144	; 0x90
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	f000 f8d0 	bl	8000e38 <TMP102_Port_I2C_Send>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d11a      	bne.n	8000cd4 <TMP102_GetTemperature+0x5c>
	{
		if (TMP102_RECEIVE_SUCCESS == TMP102_Port_I2C_Receive (TMP102_ADDRESS,payload,TMP102_TRANSMISSION_TIMEOUT))
 8000c9e:	2090      	movs	r0, #144	; 0x90
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f000 f8e5 	bl	8000e78 <TMP102_Port_I2C_Receive>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d10a      	bne.n	8000cca <TMP102_GetTemperature+0x52>
		{
			*temperature = TMP102_ConvertTemperatureToMeasureUnit(payload);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f815 	bl	8000ce8 <TMP102_ConvertTemperatureToMeasureUnit>
 8000cbe:	eef0 7a40 	vmov.f32	s15, s0
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	edc3 7a00 	vstr	s15, [r3]
 8000cc8:	e001      	b.n	8000cce <TMP102_GetTemperature+0x56>
		}
		else
		{
			opsResult = TMP102_OPS_FAILED;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
		}
		opsResult = TMP102_OPS_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e001      	b.n	8000cd8 <TMP102_GetTemperature+0x60>
	}
	else
	{
		opsResult = TMP102_OPS_FAILED;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
	}

	return opsResult;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	0000      	movs	r0, r0
 8000ce4:	0000      	movs	r0, r0
	...

08000ce8 <TMP102_ConvertTemperatureToMeasureUnit>:
 * @brief Función que interpreta los datos provistos por el sensor y los expresa en la unidad de medida adecuada.
 *
 * @return tmp102temperature_t
 */
tmp102temperature_t	TMP102_ConvertTemperatureToMeasureUnit(tmp102transmissionPayload_t * payload)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	tmp102temperature_t temperature = 0.0;
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
	int16_t rawData = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	817b      	strh	r3, [r7, #10]
	rawData = ((int16_t)payload[0] << 4) | (payload[1] >> 4);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	817b      	strh	r3, [r7, #10]

	if (rawData > 0x7FF)
 8000d12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d1a:	db05      	blt.n	8000d28 <TMP102_ConvertTemperatureToMeasureUnit+0x40>
	{
		rawData |= 0xF000;
 8000d1c:	897b      	ldrh	r3, [r7, #10]
 8000d1e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d22:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d26:	817b      	strh	r3, [r7, #10]
	}
	temperature = rawData * LSB_MULTIPLIER_TO_CELSIUS;
 8000d28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d34:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000d98 <TMP102_ConvertTemperatureToMeasureUnit+0xb0>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (tmp102DriverControl.tempMeasureUnit == FAHRENHEIT)
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <TMP102_ConvertTemperatureToMeasureUnit+0xb4>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d118      	bne.n	8000d7a <TMP102_ConvertTemperatureToMeasureUnit+0x92>
	{
		temperature = (temperature * 1.8) + 32;
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff fd37 	bl	80007bc <__aeabi_f2d>
 8000d4e:	a310      	add	r3, pc, #64	; (adr r3, 8000d90 <TMP102_ConvertTemperatureToMeasureUnit+0xa8>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff faa4 	bl	80002a0 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <TMP102_ConvertTemperatureToMeasureUnit+0xb8>)
 8000d66:	f7ff fbcb 	bl	8000500 <__adddf3>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f7ff fd7b 	bl	800086c <__aeabi_d2f>
 8000d76:	4603      	mov	r3, r0
 8000d78:	60fb      	str	r3, [r7, #12]
	}
	return temperature;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	ee07 3a90 	vmov	s15, r3
}
 8000d80:	eeb0 0a67 	vmov.f32	s0, s15
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	f3af 8000 	nop.w
 8000d90:	cccccccd 	.word	0xcccccccd
 8000d94:	3ffccccc 	.word	0x3ffccccc
 8000d98:	3d800000 	.word	0x3d800000
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	40400000 	.word	0x40400000

08000da4 <TMP102_TestMeasurement>:
 * Esta función es utilizada para verificar que el sensor reporta datos.
 *
 * @return tmp102commResult_t (enum)
 */
tmp102opsResult_t TMP102_TestMeasurement (void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	tmp102temperature_t temperature;
	if (TMP102_OPS_FAILED == TMP102_GetTemperature(&temperature))
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff63 	bl	8000c78 <TMP102_GetTemperature>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d101      	bne.n	8000dbc <TMP102_TestMeasurement+0x18>
	{
		return TMP102_OPS_FAILED;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <TMP102_TestMeasurement+0x1a>
	}
	else
	{
		return TMP102_OPS_OK;
 8000dbc:	2300      	movs	r3, #0
	}
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <TMP102_Port_I2C_Init_Handler>:
 *@brief Función "específica" de inicialización del driver para la plataforma STM32-F429ZI
 *Realiza las operaciones específicas para la librería STM
 *@return tmp102configResult_t
 */
tmp102configResult_t TMP102_Port_I2C_Init_Handler (void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	tmp102configResult_t handlerReturnCode;

	i2cHandler.Instance = I2C1;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <TMP102_Port_I2C_Init_Handler+0x68>)
 8000dd2:	601a      	str	r2, [r3, #0]
	i2cHandler.Init.ClockSpeed = 100000;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <TMP102_Port_I2C_Init_Handler+0x6c>)
 8000dd8:	605a      	str	r2, [r3, #4]
	i2cHandler.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
	i2cHandler.Init.OwnAddress1 = 0;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	i2cHandler.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000de8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dec:	611a      	str	r2, [r3, #16]
	i2cHandler.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
	i2cHandler.Init.OwnAddress2 = 0;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
	i2cHandler.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
	i2cHandler.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]


	HAL_I2C_Init(&i2cHandler);
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000e08:	f001 ff20 	bl	8002c4c <HAL_I2C_Init>

	if (HAL_I2C_Init(&i2cHandler) != HAL_OK)
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <TMP102_Port_I2C_Init_Handler+0x64>)
 8000e0e:	f001 ff1d 	bl	8002c4c <HAL_I2C_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <TMP102_Port_I2C_Init_Handler+0x56>
	{
		handlerReturnCode = TMP102_CONFIG_SUCCESS;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	e001      	b.n	8000e22 <TMP102_Port_I2C_Init_Handler+0x5a>
	}
	else
	{
		handlerReturnCode = TMP102_CONFIG_FAIL;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
	}
	return handlerReturnCode;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000090 	.word	0x20000090
 8000e30:	40005400 	.word	0x40005400
 8000e34:	000186a0 	.word	0x000186a0

08000e38 <TMP102_Port_I2C_Send>:
 *@param tmp102transmissionPayload_t * (Payload a enviar)
 *@param const tmp102transmissionTimeout_t (Timeout para la transacción)
 *@return tmp102commResult_t
 */
tmp102commResult_t TMP102_Port_I2C_Send (tmp102address_t tmp102Address,tmp102transmissionPayload_t * payload,const tmp102transmissionTimeout_t timeout)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	4603      	mov	r3, r0
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	81fb      	strh	r3, [r7, #14]
	const uint16_t bytesToTransmit = 1; //Definirlo en capa superior
 8000e46:	2301      	movs	r3, #1
 8000e48:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef transmissionStatus = 	HAL_I2C_Master_Transmit(&i2cHandler, tmp102Address, payload , bytesToTransmit, timeout);
 8000e4a:	8afa      	ldrh	r2, [r7, #22]
 8000e4c:	89f9      	ldrh	r1, [r7, #14]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4613      	mov	r3, r2
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <TMP102_Port_I2C_Send+0x3c>)
 8000e58:	f002 f83c 	bl	8002ed4 <HAL_I2C_Master_Transmit>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	757b      	strb	r3, [r7, #21]
	return TMP102_Port_Convert_Error_To_Upper_Layer (transmissionStatus, SEND);
 8000e60:	7d7b      	ldrb	r3, [r7, #21]
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f827 	bl	8000eb8 <TMP102_Port_Convert_Error_To_Upper_Layer>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000090 	.word	0x20000090

08000e78 <TMP102_Port_I2C_Receive>:
 *@param tmp102transmissionPayload_t * (Payload a enviar)
 *@param const tmp102transmissionTimeout_t (Timeout para la transacción)
 *@return tmp102commResult_t
 */
tmp102commResult_t TMP102_Port_I2C_Receive (tmp102address_t tmp102Address,tmp102transmissionPayload_t * payload,const tmp102transmissionTimeout_t timeout)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	81fb      	strh	r3, [r7, #14]
	const uint16_t bytesToReceive = 2; //Definirlo en capa superior
 8000e86:	2302      	movs	r3, #2
 8000e88:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef transmissionStatus = HAL_I2C_Master_Receive(&i2cHandler, tmp102Address, payload, bytesToReceive, timeout);
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	89f9      	ldrh	r1, [r7, #14]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <TMP102_Port_I2C_Receive+0x3c>)
 8000e98:	f002 f91a 	bl	80030d0 <HAL_I2C_Master_Receive>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	757b      	strb	r3, [r7, #21]
	return TMP102_Port_Convert_Error_To_Upper_Layer (transmissionStatus, RECEIVE);
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f807 	bl	8000eb8 <TMP102_Port_Convert_Error_To_Upper_Layer>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000090 	.word	0x20000090

08000eb8 <TMP102_Port_Convert_Error_To_Upper_Layer>:
 *@brief Función de compatibilidad entre los errores de STM y otros fabricantes
 *@param HAL_StatusTypeDef (Errores STM)
 *@param commDirection_t (Dirección de la transmisión Transmisión/Recepción)
 *@return tmp102commResult_t
 */
tmp102commResult_t TMP102_Port_Convert_Error_To_Upper_Layer (HAL_StatusTypeDef stmHalErrorType, commDirection_t commDirection){
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
	tmp102commResult_t returnValue;
	switch( stmHalErrorType )
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d82e      	bhi.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <TMP102_Port_Convert_Error_To_Upper_Layer+0x1c>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000ef7 	.word	0x08000ef7
 8000edc:	08000f09 	.word	0x08000f09
 8000ee0:	08000f1b 	.word	0x08000f1b
	{
	    case HAL_OK:
	        if (SEND == commDirection)
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <TMP102_Port_Convert_Error_To_Upper_Layer+0x38>
	        {
	        	returnValue = TMP102_SEND_SUCCESS;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
	        }
	        else
	        {
	        	returnValue = TMP102_RECEIVE_SUCCESS;
	        }
	        break;
 8000eee:	e01d      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	        	returnValue = TMP102_RECEIVE_SUCCESS;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	73fb      	strb	r3, [r7, #15]
	        break;
 8000ef4:	e01a      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	    case HAL_ERROR:
	        if (SEND == commDirection)
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <TMP102_Port_Convert_Error_To_Upper_Layer+0x4a>
	        {
	        	returnValue = TMP102_SEND_FAILURE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
	        }
	        else
	        {
	        	returnValue = TMP102_RECEIVE_FAILURE;
	        }
	        break;
 8000f00:	e014      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	        	returnValue = TMP102_RECEIVE_FAILURE;
 8000f02:	2303      	movs	r3, #3
 8000f04:	73fb      	strb	r3, [r7, #15]
	        break;
 8000f06:	e011      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	    case HAL_BUSY :
	        if (SEND == commDirection)
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <TMP102_Port_Convert_Error_To_Upper_Layer+0x5c>
	        {
	        	returnValue = TMP102_SEND_BUSY;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	73fb      	strb	r3, [r7, #15]
	        }
	        else
	        {
	        	returnValue = TMP102_RECEIVE_BUSY;
	        }
	        break;
 8000f12:	e00b      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	        	returnValue = TMP102_RECEIVE_BUSY;
 8000f14:	2305      	movs	r3, #5
 8000f16:	73fb      	strb	r3, [r7, #15]
	        break;
 8000f18:	e008      	b.n	8000f2c <TMP102_Port_Convert_Error_To_Upper_Layer+0x74>
	    case HAL_TIMEOUT:
	        if (SEND == commDirection)
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <TMP102_Port_Convert_Error_To_Upper_Layer+0x6e>
	        {
	        	returnValue = TMP102_SEND_TIMEOUT;
 8000f20:	2306      	movs	r3, #6
 8000f22:	73fb      	strb	r3, [r7, #15]
	        }
	        else
	        {
	        	returnValue = TMP102_RECEIVE_TIMEOUT;
	        }
	    	break;
 8000f24:	e001      	b.n	8000f2a <TMP102_Port_Convert_Error_To_Upper_Layer+0x72>
	        	returnValue = TMP102_RECEIVE_TIMEOUT;
 8000f26:	2307      	movs	r3, #7
 8000f28:	73fb      	strb	r3, [r7, #15]
	    	break;
 8000f2a:	bf00      	nop
	}


	return returnValue;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <vPrintString>:
/* USER CODE BEGIN PV */
void vPrintString( const char *pcString );


void vPrintString( const char *pcString )
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10 );
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff f953 	bl	80001f0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	230a      	movs	r3, #10
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <vPrintString+0x24>)
 8000f54:	f003 fc11 	bl	800477a <HAL_UART_Transmit>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000354 	.word	0x20000354

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fda7 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f8a3 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 fa03 	bl	800137c <MX_GPIO_Init>
  MX_ETH_Init();
 8000f76:	f000 f95b 	bl	8001230 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f7a:	f000 f9a7 	bl	80012cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f7e:	f000 f9cf 	bl	8001320 <MX_USB_OTG_FS_PCD_Init>
  //MX_I2C1_Init();
  MX_ADC1_Init();
 8000f82:	f000 f903 	bl	800118c <MX_ADC1_Init>

  char mensaje[20];
  int temp_integer;
  int temp_decimal;
  //! Inicializacion del driver
  TMP102_InitDriver(CELSIUS);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fe42 	bl	8000c10 <TMP102_InitDriver>
  temperature=0;
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TMP102_SetTemperatureMeasureUnit(CELSIUS);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fe60 	bl	8000c58 <TMP102_SetTemperatureMeasureUnit>
	  if (TMP102_OPS_OK == TMP102_GetTemperature(&temperature))
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe6b 	bl	8000c78 <TMP102_GetTemperature>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d118      	bne.n	8000fda <main+0x76>
	  {
		  temp_integer = (int)temperature;
 8000fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 3a90 	vmov	r3, s15
 8000fb4:	61fb      	str	r3, [r7, #28]
		  temp_decimal = (int)((temperature - temp_integer)*100);
 8000fb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800109c <main+0x138>
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	61bb      	str	r3, [r7, #24]
	  }



	  sprintf(mensaje,
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	4638      	mov	r0, r7
 8000fe0:	492f      	ldr	r1, [pc, #188]	; (80010a0 <main+0x13c>)
 8000fe2:	f004 fa73 	bl	80054cc <siprintf>
			  "%u.%02u C\r\n",
			  ((unsigned int)temp_integer),
	  	  	  ((unsigned int)temp_decimal)
			  );
	  vPrintString(mensaje);
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffa7 	bl	8000f3c <vPrintString>

	  if (FAHRENHEIT == TMP102_GetTemperatureMeasureUnit())
 8000fee:	f7ff fe27 	bl	8000c40 <TMP102_GetTemperatureMeasureUnit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d103      	bne.n	8001000 <main+0x9c>
	  {
		  vPrintString("FAHRENHEIT\r\n");
 8000ff8:	482a      	ldr	r0, [pc, #168]	; (80010a4 <main+0x140>)
 8000ffa:	f7ff ff9f 	bl	8000f3c <vPrintString>
 8000ffe:	e002      	b.n	8001006 <main+0xa2>
	  }
	  else
	  {
		  vPrintString("CELSIUS\r\n");
 8001000:	4829      	ldr	r0, [pc, #164]	; (80010a8 <main+0x144>)
 8001002:	f7ff ff9b 	bl	8000f3c <vPrintString>
	  }

	  TMP102_SetTemperatureMeasureUnit(FAHRENHEIT);
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fe26 	bl	8000c58 <TMP102_SetTemperatureMeasureUnit>

	  if (TMP102_OPS_OK == TMP102_GetTemperature(&temperature))
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe31 	bl	8000c78 <TMP102_GetTemperature>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d118      	bne.n	800104e <main+0xea>
	  {
		  temp_integer = (int)temperature;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001024:	ee17 3a90 	vmov	r3, s15
 8001028:	61fb      	str	r3, [r7, #28]
		  temp_decimal = (int)((temperature - temp_integer)*100);
 800102a:	ed97 7a05 	vldr	s14, [r7, #20]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800109c <main+0x138>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001048:	ee17 3a90 	vmov	r3, s15
 800104c:	61bb      	str	r3, [r7, #24]
	  }

	  sprintf(mensaje,
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4638      	mov	r0, r7
 8001054:	4915      	ldr	r1, [pc, #84]	; (80010ac <main+0x148>)
 8001056:	f004 fa39 	bl	80054cc <siprintf>
			  "%u.%02u F\r\n",
			  ((unsigned int)temp_integer),
	  	  	  ((unsigned int)temp_decimal)
			  );
	  vPrintString(mensaje);
 800105a:	463b      	mov	r3, r7
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff6d 	bl	8000f3c <vPrintString>

	  //
	  if (FAHRENHEIT == TMP102_GetTemperatureMeasureUnit())
 8001062:	f7ff fded 	bl	8000c40 <TMP102_GetTemperatureMeasureUnit>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d103      	bne.n	8001074 <main+0x110>
	  {
		  vPrintString("FAHRENHEIT\r\n");
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <main+0x140>)
 800106e:	f7ff ff65 	bl	8000f3c <vPrintString>
 8001072:	e002      	b.n	800107a <main+0x116>
	  }
	  else
	  {
		  vPrintString("CELSIUS\r\n");
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <main+0x144>)
 8001076:	f7ff ff61 	bl	8000f3c <vPrintString>
	  }

	  if (TMP102_OPS_OK==TMP102_TestMeasurement())
 800107a:	f7ff fe93 	bl	8000da4 <TMP102_TestMeasurement>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <main+0x128>
	  {
		  vPrintString("Sensor is reporting correctly\r\n");
 8001084:	480a      	ldr	r0, [pc, #40]	; (80010b0 <main+0x14c>)
 8001086:	f7ff ff59 	bl	8000f3c <vPrintString>
 800108a:	e002      	b.n	8001092 <main+0x12e>
	  }
	  else
	  {
		  vPrintString("Sensor is NOT reporting\r\n");
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <main+0x150>)
 800108e:	f7ff ff55 	bl	8000f3c <vPrintString>
	  }
	  HAL_Delay(500);
 8001092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001096:	f000 fd83 	bl	8001ba0 <HAL_Delay>
	  TMP102_SetTemperatureMeasureUnit(CELSIUS);
 800109a:	e77a      	b.n	8000f92 <main+0x2e>
 800109c:	42c80000 	.word	0x42c80000
 80010a0:	08005dc0 	.word	0x08005dc0
 80010a4:	08005dcc 	.word	0x08005dcc
 80010a8:	08005ddc 	.word	0x08005ddc
 80010ac:	08005de8 	.word	0x08005de8
 80010b0:	08005df4 	.word	0x08005df4
 80010b4:	08005e14 	.word	0x08005e14

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 f9f8 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <SystemClock_Config+0xcc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <SystemClock_Config+0xd0>)
 8001102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001118:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800112c:	23a8      	movs	r3, #168	; 0xa8
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001134:	2307      	movs	r3, #7
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fe37 	bl	8003db0 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001148:	f000 f9fa 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001158:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2105      	movs	r1, #5
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f898 	bl	80042a0 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001176:	f000 f9e3 	bl	8001540 <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3750      	adds	r7, #80	; 0x50
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_ADC1_Init+0x98>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_ADC1_Init+0x9c>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_ADC1_Init+0x98>)
 80011a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <MX_ADC1_Init+0xa0>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_ADC1_Init+0x98>)
 80011da:	2201      	movs	r2, #1
 80011dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_ADC1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_ADC1_Init+0x98>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_ADC1_Init+0x98>)
 80011ee:	f000 fcfb 	bl	8001be8 <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011f8:	f000 f9a2 	bl	8001540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_ADC1_Init+0x98>)
 800120e:	f000 fd2f 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001218:	f000 f992 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000025c 	.word	0x2000025c
 8001228:	40012000 	.word	0x40012000
 800122c:	0f000001 	.word	0x0f000001

08001230 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_ETH_Init+0x84>)
 8001236:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <MX_ETH_Init+0x88>)
 8001238:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_ETH_Init+0x8c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_ETH_Init+0x8c>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_ETH_Init+0x8c>)
 8001248:	22e1      	movs	r2, #225	; 0xe1
 800124a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_ETH_Init+0x8c>)
 800124e:	2200      	movs	r2, #0
 8001250:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_ETH_Init+0x8c>)
 8001254:	2200      	movs	r2, #0
 8001256:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_ETH_Init+0x8c>)
 800125a:	2200      	movs	r2, #0
 800125c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_ETH_Init+0x84>)
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <MX_ETH_Init+0x8c>)
 8001262:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_ETH_Init+0x84>)
 8001266:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800126a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_ETH_Init+0x84>)
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <MX_ETH_Init+0x90>)
 8001270:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_ETH_Init+0x84>)
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_ETH_Init+0x94>)
 8001276:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_ETH_Init+0x84>)
 800127a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800127e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_ETH_Init+0x84>)
 8001282:	f001 f809 	bl	8002298 <HAL_ETH_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 f958 	bl	8001540 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001290:	2238      	movs	r2, #56	; 0x38
 8001292:	2100      	movs	r1, #0
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_ETH_Init+0x98>)
 8001296:	f004 f911 	bl	80054bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_ETH_Init+0x98>)
 800129c:	2221      	movs	r2, #33	; 0x21
 800129e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_ETH_Init+0x98>)
 80012a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80012a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_ETH_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200002a4 	.word	0x200002a4
 80012b8:	40028000 	.word	0x40028000
 80012bc:	200008a4 	.word	0x200008a4
 80012c0:	200001bc 	.word	0x200001bc
 80012c4:	2000011c 	.word	0x2000011c
 80012c8:	200000e4 	.word	0x200000e4

080012cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART3_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 8001304:	f003 f9ec 	bl	80046e0 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f917 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000354 	.word	0x20000354
 800131c:	40004800 	.word	0x40004800

08001320 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800132a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	2204      	movs	r2, #4
 8001330:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001334:	2202      	movs	r2, #2
 8001336:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2202      	movs	r2, #2
 8001342:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2201      	movs	r2, #1
 8001348:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	2201      	movs	r2, #1
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	f002 fc07 	bl	8003b76 <HAL_PCD_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 f8e7 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000398 	.word	0x20000398

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	4b64      	ldr	r3, [pc, #400]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a63      	ldr	r2, [pc, #396]	; (8001528 <MX_GPIO_Init+0x1ac>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a5c      	ldr	r2, [pc, #368]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b56      	ldr	r3, [pc, #344]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a55      	ldr	r2, [pc, #340]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b4f      	ldr	r3, [pc, #316]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <MX_GPIO_Init+0x1ac>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b48      	ldr	r3, [pc, #288]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a47      	ldr	r2, [pc, #284]	; (8001528 <MX_GPIO_Init+0x1ac>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b45      	ldr	r3, [pc, #276]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a40      	ldr	r2, [pc, #256]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a39      	ldr	r2, [pc, #228]	; (8001528 <MX_GPIO_Init+0x1ac>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <MX_GPIO_Init+0x1ac>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f244 0181 	movw	r1, #16513	; 0x4081
 800145c:	4833      	ldr	r0, [pc, #204]	; (800152c <MX_GPIO_Init+0x1b0>)
 800145e:	f001 fbdb 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	4832      	ldr	r0, [pc, #200]	; (8001530 <MX_GPIO_Init+0x1b4>)
 8001468:	f001 fbd6 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	4830      	ldr	r0, [pc, #192]	; (8001534 <MX_GPIO_Init+0x1b8>)
 8001474:	f001 fbd0 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	482a      	ldr	r0, [pc, #168]	; (8001538 <MX_GPIO_Init+0x1bc>)
 8001490:	f001 fa16 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001494:	f244 0381 	movw	r3, #16513	; 0x4081
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <MX_GPIO_Init+0x1b0>)
 80014ae:	f001 fa07 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	481d      	ldr	r0, [pc, #116]	; (800153c <MX_GPIO_Init+0x1c0>)
 80014c8:	f001 f9fa 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_GPIO_Init+0x1b4>)
 80014e4:	f001 f9ec 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_GPIO_Init+0x1b4>)
 80014fc:	f001 f9e0 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_GPIO_Init+0x1b8>)
 800151a:	f001 f9d1 	bl	80028c0 <HAL_GPIO_Init>

}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40021800 	.word	0x40021800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020800 	.word	0x40020800
 800153c:	40021400 	.word	0x40021400

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_ADC_MspInit+0x7c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d127      	bne.n	800160e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_ADC_MspInit+0x80>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_ADC_MspInit+0x84>)
 800160a:	f001 f959 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012000 	.word	0x40012000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a55      	ldr	r2, [pc, #340]	; (8001798 <HAL_ETH_MspInit+0x174>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 80a4 	bne.w	8001790 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_ETH_MspInit+0x178>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_ETH_MspInit+0x178>)
 8001652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_ETH_MspInit+0x178>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_ETH_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a4b      	ldr	r2, [pc, #300]	; (800179c <HAL_ETH_MspInit+0x178>)
 800166e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_ETH_MspInit+0x178>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <HAL_ETH_MspInit+0x178>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a44      	ldr	r2, [pc, #272]	; (800179c <HAL_ETH_MspInit+0x178>)
 800168a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b42      	ldr	r3, [pc, #264]	; (800179c <HAL_ETH_MspInit+0x178>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a36      	ldr	r2, [pc, #216]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6313      	str	r3, [r2, #48]	; 0x30
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_ETH_MspInit+0x178>)
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_ETH_MspInit+0x178>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800170c:	2332      	movs	r3, #50	; 0x32
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800171c:	230b      	movs	r3, #11
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	481e      	ldr	r0, [pc, #120]	; (80017a0 <HAL_ETH_MspInit+0x17c>)
 8001728:	f001 f8ca 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800172c:	2386      	movs	r3, #134	; 0x86
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173c:	230b      	movs	r3, #11
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_ETH_MspInit+0x180>)
 8001748:	f001 f8ba 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175e:	230b      	movs	r3, #11
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <HAL_ETH_MspInit+0x184>)
 800176a:	f001 f8a9 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800176e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001780:	230b      	movs	r3, #11
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_ETH_MspInit+0x188>)
 800178c:	f001 f898 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	; 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40028000 	.word	0x40028000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40021800 	.word	0x40021800

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_I2C_MspInit+0x84>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12c      	bne.n	800182c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001800:	2304      	movs	r3, #4
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_I2C_MspInit+0x8c>)
 800180c:	f001 f858 	bl	80028c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_I2C_MspInit+0x88>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_I2C_MspInit+0x88>)
 800181a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_I2C_MspInit+0x88>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x88>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800189a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ac:	2307      	movs	r3, #7
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_UART_MspInit+0x8c>)
 80018b8:	f001 f802 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40004800 	.word	0x40004800
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f0:	d13f      	bne.n	8001972 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_PCD_MspInit+0xac>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_PCD_MspInit+0xac>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_PCD_MspInit+0xac>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 800190e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001920:	230a      	movs	r3, #10
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <HAL_PCD_MspInit+0xb0>)
 800192c:	f000 ffc8 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <HAL_PCD_MspInit+0xb0>)
 8001946:	f000 ffbb 	bl	80028c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_PCD_MspInit+0xac>)
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_PCD_MspInit+0xac>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	6353      	str	r3, [r2, #52]	; 0x34
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_PCD_MspInit+0xac>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_PCD_MspInit+0xac>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_PCD_MspInit+0xac>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f8c6 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f003 fd2e 	bl	8005468 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20030000 	.word	0x20030000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	200008ac 	.word	0x200008ac
 8001a40:	200008c8 	.word	0x200008c8

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f003 fced 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fa63 	bl	8000f64 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001aa0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001aac:	08005e8c 	.word	0x08005e8c
  ldr r2, =_sbss
 8001ab0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ab4:	200008c4 	.word	0x200008c4

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 fba3 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fd2c 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fbad 	bl	800227e <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b3c:	f000 fb83 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	200008b0 	.word	0x200008b0

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200008b0 	.word	0x200008b0

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e033      	b.n	8001c66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcc8 	bl	800159c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
 8001c32:	f043 0202 	orr.w	r2, r3, #2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f94a 	bl	8001ed4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
 8001c56:	e001      	b.n	8001c5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1c>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e113      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x244>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d925      	bls.n	8001ce8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4403      	add	r3, r0
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	e022      	b.n	8001d2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6919      	ldr	r1, [r3, #16]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4403      	add	r3, r0
 8001d24:	409a      	lsls	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d824      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b05      	subs	r3, #5
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b05      	subs	r3, #5
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7e:	e04c      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d824      	bhi.n	8001dd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b23      	subs	r3, #35	; 0x23
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b23      	subs	r3, #35	; 0x23
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e023      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b41      	subs	r3, #65	; 0x41
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b41      	subs	r3, #65	; 0x41
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_ADC_ConfigChannel+0x250>)
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d10f      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12b      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0x1f4>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b11      	cmp	r3, #17
 8001e62:	d122      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d111      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_ADC_ConfigChannel+0x260>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9a      	lsrs	r2, r3, #18
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e9c:	e002      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f9      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	10000012 	.word	0x10000012
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <ADC_Init+0x1f0>)
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <ADC_Init+0x1f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e00f      	b.n	8001fd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0202 	bic.w	r2, r2, #2
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e1b      	ldrb	r3, [r3, #24]
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800201e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	3b01      	subs	r3, #1
 800202c:	035a      	lsls	r2, r3, #13
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e007      	b.n	8002048 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	3b01      	subs	r3, #1
 8002064:	051a      	lsls	r2, r3, #20
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800208a:	025a      	lsls	r2, r3, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	029a      	lsls	r2, r3, #10
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	609a      	str	r2, [r3, #8]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40012300 	.word	0x40012300
 80020c8:	0f000001 	.word	0x0f000001

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff47 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff5c 	bl	8002114 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffb0 	bl	80021ec <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06c      	b.n	8002384 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2223      	movs	r2, #35	; 0x23
 80022b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff f9b1 	bl	8001624 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ETH_Init+0xf4>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_ETH_Init+0xf4>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_ETH_Init+0xf4>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff fc38 	bl	8001b88 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800231a:	e011      	b.n	8002340 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800231c:	f7ff fc34 	bl	8001b88 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d909      	bls.n	8002340 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	22e0      	movs	r2, #224	; 0xe0
 8002338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e021      	b.n	8002384 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e4      	bne.n	800231c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f944 	bl	80025e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9eb 	bl	8002734 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa41 	bl	80027e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9a9 	bl	80026c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2210      	movs	r2, #16
 800237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800

08002394 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <ETH_SetMACConfig+0x134>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	7c1b      	ldrb	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <ETH_SetMACConfig+0x28>
 80023b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ba:	e000      	b.n	80023be <ETH_SetMACConfig+0x2a>
 80023bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7c5b      	ldrb	r3, [r3, #17]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetMACConfig+0x38>
 80023c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ca:	e000      	b.n	80023ce <ETH_SetMACConfig+0x3a>
 80023cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7fdb      	ldrb	r3, [r3, #31]
 80023da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	7f92      	ldrb	r2, [r2, #30]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d102      	bne.n	80023f2 <ETH_SetMACConfig+0x5e>
 80023ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x60>
 80023f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800240a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d102      	bne.n	800241c <ETH_SetMACConfig+0x88>
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	e000      	b.n	800241e <ETH_SetMACConfig+0x8a>
 800241c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7bdb      	ldrb	r3, [r3, #15]
 8002424:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002426:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002436:	4313      	orrs	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fba6 	bl	8001ba0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	f64f 7341 	movw	r3, #65345	; 0xff41
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800247a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8002480:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8002488:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002490:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002498:	4313      	orrs	r3, r2
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff fb75 	bl	8001ba0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	ff20810f 	.word	0xff20810f

080024cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <ETH_SetDMAConfig+0x110>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7b1b      	ldrb	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <ETH_SetDMAConfig+0x2c>
 80024f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024f6:	e000      	b.n	80024fa <ETH_SetDMAConfig+0x2e>
 80024f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7b5b      	ldrb	r3, [r3, #13]
 80024fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002500:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	7f52      	ldrb	r2, [r2, #29]
 8002506:	2a00      	cmp	r2, #0
 8002508:	d102      	bne.n	8002510 <ETH_SetDMAConfig+0x44>
 800250a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800250e:	e000      	b.n	8002512 <ETH_SetDMAConfig+0x46>
 8002510:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002512:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7b9b      	ldrb	r3, [r3, #14]
 8002518:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800251a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002520:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7f1b      	ldrb	r3, [r3, #28]
 8002526:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002528:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7f9b      	ldrb	r3, [r3, #30]
 800252e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002530:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002536:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002540:	4313      	orrs	r3, r2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002550:	461a      	mov	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff fb1c 	bl	8001ba0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002580:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002586:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800258c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002594:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002596:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800259e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff faed 	bl	8001ba0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	f8de3f23 	.word	0xf8de3f23

080025e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0a6      	sub	sp, #152	; 0x98
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800261c:	2300      	movs	r3, #0
 800261e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002626:	2300      	movs	r3, #0
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800264c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fe9a 	bl	8002394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002664:	2301      	movs	r3, #1
 8002666:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800268c:	2301      	movs	r3, #1
 800268e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002694:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800269a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800269c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026b0:	f107 0308 	add.w	r3, r7, #8
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff08 	bl	80024cc <ETH_SetDMAConfig>
}
 80026bc:	bf00      	nop
 80026be:	3798      	adds	r7, #152	; 0x98
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3305      	adds	r3, #5
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	3204      	adds	r2, #4
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <ETH_MACAddressConfig+0x68>)
 80026e6:	4413      	add	r3, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3303      	adds	r3, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	061a      	lsls	r2, r3, #24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3302      	adds	r3, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3301      	adds	r3, #1
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	4313      	orrs	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <ETH_MACAddressConfig+0x6c>)
 8002716:	4413      	add	r3, r2
 8002718:	461a      	mov	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	6013      	str	r3, [r2, #0]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40028040 	.word	0x40028040
 8002730:	40028044 	.word	0x40028044

08002734 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e03e      	b.n	80027c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	3206      	adds	r2, #6
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d80c      	bhi.n	80027a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68d9      	ldr	r1, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	e004      	b.n	80027ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d9bd      	bls.n	8002742 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d8:	611a      	str	r2, [r3, #16]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e046      	b.n	8002882 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002830:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002838:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	3212      	adds	r2, #18
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d80c      	bhi.n	8002872 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	e004      	b.n	800287c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d9b5      	bls.n	80027f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	60da      	str	r2, [r3, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e177      	b.n	8002bcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f040 8166 	bne.w	8002bc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d005      	beq.n	8002912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	2b02      	cmp	r3, #2
 8002910:	d130      	bne.n	8002974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0201 	and.w	r2, r3, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d017      	beq.n	80029b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d123      	bne.n	8002a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80c0 	beq.w	8002bc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_GPIO_Init+0x324>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_GPIO_Init+0x324>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_GPIO_Init+0x324>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a62:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <HAL_GPIO_Init+0x328>)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_GPIO_Init+0x32c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d037      	beq.n	8002afe <HAL_GPIO_Init+0x23e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a57      	ldr	r2, [pc, #348]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d031      	beq.n	8002afa <HAL_GPIO_Init+0x23a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a56      	ldr	r2, [pc, #344]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <HAL_GPIO_Init+0x236>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_GPIO_Init+0x338>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d025      	beq.n	8002af2 <HAL_GPIO_Init+0x232>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a54      	ldr	r2, [pc, #336]	; (8002bfc <HAL_GPIO_Init+0x33c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x22e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a53      	ldr	r2, [pc, #332]	; (8002c00 <HAL_GPIO_Init+0x340>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x22a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_GPIO_Init+0x344>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x226>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a51      	ldr	r2, [pc, #324]	; (8002c08 <HAL_GPIO_Init+0x348>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x222>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	; (8002c0c <HAL_GPIO_Init+0x34c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x21e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x21a>
 8002ad6:	2309      	movs	r3, #9
 8002ad8:	e012      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ada:	230a      	movs	r3, #10
 8002adc:	e010      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e00e      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e00c      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00a      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002aea:	2305      	movs	r3, #5
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x328>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_GPIO_Init+0x354>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f ae84 	bls.w	80028dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022400 	.word	0x40022400
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e12b      	b.n	8002eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fd9c 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f001 fcee 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a81      	ldr	r2, [pc, #516]	; (8002ec0 <HAL_I2C_Init+0x274>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d807      	bhi.n	8002cd0 <HAL_I2C_Init+0x84>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a80      	ldr	r2, [pc, #512]	; (8002ec4 <HAL_I2C_Init+0x278>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	bf94      	ite	ls
 8002cc8:	2301      	movls	r3, #1
 8002cca:	2300      	movhi	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e006      	b.n	8002cde <HAL_I2C_Init+0x92>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <HAL_I2C_Init+0x27c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bf94      	ite	ls
 8002cd8:	2301      	movls	r3, #1
 8002cda:	2300      	movhi	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0e7      	b.n	8002eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a78      	ldr	r2, [pc, #480]	; (8002ecc <HAL_I2C_Init+0x280>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9b      	lsrs	r3, r3, #18
 8002cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_I2C_Init+0x274>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d802      	bhi.n	8002d20 <HAL_I2C_Init+0xd4>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	e009      	b.n	8002d34 <HAL_I2C_Init+0xe8>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <HAL_I2C_Init+0x284>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	3301      	adds	r3, #1
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	495c      	ldr	r1, [pc, #368]	; (8002ec0 <HAL_I2C_Init+0x274>)
 8002d50:	428b      	cmp	r3, r1
 8002d52:	d819      	bhi.n	8002d88 <HAL_I2C_Init+0x13c>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e59      	subs	r1, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d68:	400b      	ands	r3, r1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_I2C_Init+0x138>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e59      	subs	r1, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	e051      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002d84:	2304      	movs	r3, #4
 8002d86:	e04f      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <HAL_I2C_Init+0x168>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e012      	b.n	8002dda <HAL_I2C_Init+0x18e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Init+0x196>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e022      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10e      	bne.n	8002e08 <HAL_I2C_Init+0x1bc>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e58      	subs	r0, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	440b      	add	r3, r1
 8002df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e06:	e00f      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	6809      	ldr	r1, [r1, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6911      	ldr	r1, [r2, #16]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	000186a0 	.word	0x000186a0
 8002ec4:	001e847f 	.word	0x001e847f
 8002ec8:	003d08ff 	.word	0x003d08ff
 8002ecc:	431bde83 	.word	0x431bde83
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	817b      	strh	r3, [r7, #10]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7fe fe4e 	bl	8001b88 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	f040 80e0 	bne.w	80030bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2319      	movs	r3, #25
 8002f02:	2201      	movs	r2, #1
 8002f04:	4970      	ldr	r1, [pc, #448]	; (80030c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fc58 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0d3      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0x50>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0cc      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d007      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2221      	movs	r2, #33	; 0x21
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2210      	movs	r2, #16
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_I2C_Master_Transmit+0x1f8>)
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	6a3a      	ldr	r2, [r7, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fac2 	bl	800351c <I2C_MasterRequestWrite>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e08d      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fb8:	e066      	b.n	8003088 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6a39      	ldr	r1, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fcd2 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d107      	bne.n	8002fe2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06b      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11b      	bne.n	800305c <HAL_I2C_Master_Transmit+0x188>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fcc2 	bl	80039ea <I2C_WaitOnBTFFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e01a      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d194      	bne.n	8002fba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	00100002 	.word	0x00100002
 80030cc:	ffff0000 	.word	0xffff0000

080030d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7fe fd50 	bl	8001b88 <HAL_GetTick>
 80030e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 820b 	bne.w	800350e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2319      	movs	r3, #25
 80030fe:	2201      	movs	r2, #1
 8003100:	497c      	ldr	r1, [pc, #496]	; (80032f4 <HAL_I2C_Master_Receive+0x224>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fb5a 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	e1fe      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Master_Receive+0x50>
 800311c:	2302      	movs	r3, #2
 800311e:	e1f7      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d007      	beq.n	8003146 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2222      	movs	r2, #34	; 0x22
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2210      	movs	r2, #16
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_I2C_Master_Receive+0x228>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa46 	bl	8003620 <I2C_MasterRequestRead>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1b8      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d113      	bne.n	80031ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e18c      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d11b      	bne.n	800320e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e16c      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	2b02      	cmp	r3, #2
 8003214:	d11b      	bne.n	800324e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003224:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	e14c      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003274:	e138      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	2b03      	cmp	r3, #3
 800327c:	f200 80f1 	bhi.w	8003462 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b01      	cmp	r3, #1
 8003286:	d123      	bne.n	80032d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fbed 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e139      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ce:	e10b      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d14e      	bne.n	8003376 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	2200      	movs	r2, #0
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <HAL_I2C_Master_Receive+0x22c>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa6a 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e10e      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
 80032f2:	bf00      	nop
 80032f4:	00100002 	.word	0x00100002
 80032f8:	ffff0000 	.word	0xffff0000
 80032fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003374:	e0b8      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	4966      	ldr	r1, [pc, #408]	; (8003518 <HAL_I2C_Master_Receive+0x448>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fa1b 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0bf      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2200      	movs	r2, #0
 80033da:	494f      	ldr	r1, [pc, #316]	; (8003518 <HAL_I2C_Master_Receive+0x448>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f9ed 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e091      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003460:	e042      	b.n	80034e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fb00 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e04c      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d118      	bne.n	80034e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f aec2 	bne.w	8003276 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010004 	.word	0x00010004

0800351c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d006      	beq.n	8003546 <I2C_MasterRequestWrite+0x2a>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <I2C_MasterRequestWrite+0x2a>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003544:	d108      	bne.n	8003558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b12      	cmp	r3, #18
 800355e:	d107      	bne.n	8003570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f91d 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d103      	bne.n	80035a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e035      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e01b      	b.n	80035f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	11db      	asrs	r3, r3, #7
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f063 030f 	orn	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <I2C_MasterRequestWrite+0xfc>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f943 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e010      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <I2C_MasterRequestWrite+0x100>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f933 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	00010008 	.word	0x00010008
 800361c:	00010002 	.word	0x00010002

08003620 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	460b      	mov	r3, r1
 800362e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d006      	beq.n	800365a <I2C_MasterRequestRead+0x3a>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d003      	beq.n	800365a <I2C_MasterRequestRead+0x3a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003658:	d108      	bne.n	800366c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e00b      	b.n	8003684 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	2b11      	cmp	r3, #17
 8003672:	d107      	bne.n	8003684 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f893 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d103      	bne.n	80036b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e079      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d108      	bne.n	80036d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e05f      	b.n	8003794 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	11db      	asrs	r3, r3, #7
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0306 	and.w	r3, r3, #6
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f063 030f 	orn	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4930      	ldr	r1, [pc, #192]	; (80037b4 <I2C_MasterRequestRead+0x194>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8b9 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e054      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4929      	ldr	r1, [pc, #164]	; (80037b8 <I2C_MasterRequestRead+0x198>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8a9 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e044      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003746:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f831 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d103      	bne.n	8003778 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e017      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	11db      	asrs	r3, r3, #7
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f063 030e 	orn	r3, r3, #14
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4907      	ldr	r1, [pc, #28]	; (80037b8 <I2C_MasterRequestRead+0x198>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f865 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	00010008 	.word	0x00010008
 80037b8:	00010002 	.word	0x00010002

080037bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	e025      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d4:	d021      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe f9d7 	bl	8001b88 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d116      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e023      	b.n	8003862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10d      	bne.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	e00c      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d0b6      	beq.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003878:	e051      	b.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d123      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e046      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d021      	beq.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe f955 	bl	8001b88 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e020      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10c      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e00b      	b.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	43da      	mvns	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d18d      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003974:	e02d      	b.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8ce 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02d      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe f8fb 	bl	8001b88 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d1ca      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f6:	e02d      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f88d 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02d      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0e:	d021      	beq.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fe f8ba 	bl	8001b88 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d1ca      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a78:	e042      	b.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d119      	bne.n	8003abc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e029      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abc:	f7fe f864 	bl	8001b88 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d1b5      	bne.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d11b      	bne.n	8003b68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b78:	b08f      	sub	sp, #60	; 0x3c
 8003b7a:	af0a      	add	r7, sp, #40	; 0x28
 8003b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e10f      	b.n	8003da8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fe94 	bl	80018d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f9ad 	bl	8004f26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	687e      	ldr	r6, [r7, #4]
 8003bd4:	466d      	mov	r5, sp
 8003bd6:	f106 0410 	add.w	r4, r6, #16
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bea:	1d33      	adds	r3, r6, #4
 8003bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bee:	6838      	ldr	r0, [r7, #0]
 8003bf0:	f001 f938 	bl	8004e64 <USB_CoreInit>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0d0      	b.n	8003da8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f99b 	bl	8004f48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e04a      	b.n	8003cae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	333d      	adds	r3, #61	; 0x3d
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	333c      	adds	r3, #60	; 0x3c
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	b298      	uxth	r0, r3
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3344      	adds	r3, #68	; 0x44
 8003c54:	4602      	mov	r2, r0
 8003c56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3340      	adds	r3, #64	; 0x40
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3348      	adds	r3, #72	; 0x48
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334c      	adds	r3, #76	; 0x4c
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3354      	adds	r3, #84	; 0x54
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3af      	bcc.n	8003c18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e044      	b.n	8003d48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	3301      	adds	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3b5      	bcc.n	8003cbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	687e      	ldr	r6, [r7, #4]
 8003d5a:	466d      	mov	r5, sp
 8003d5c:	f106 0410 	add.w	r4, r6, #16
 8003d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d70:	1d33      	adds	r3, r6, #4
 8003d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	f001 f933 	bl	8004fe0 <USB_DevInit>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e00d      	b.n	8003da8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fafe 	bl	80053a2 <USB_DevDisconnect>

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e267      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e242      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6f      	ldr	r2, [pc, #444]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6c      	ldr	r2, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a65      	ldr	r2, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd fe8e 	bl	8001b88 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd fe8a 	bl	8001b88 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e207      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fe7a 	bl	8001b88 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd fe76 	bl	8001b88 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1f3      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b44      	ldr	r3, [pc, #272]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c7      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4937      	ldr	r1, [pc, #220]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fe2f 	bl	8001b88 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd fe2b 	bl	8001b88 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a8      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4925      	ldr	r1, [pc, #148]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fe0e 	bl	8001b88 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd fe0a 	bl	8001b88 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e187      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d036      	beq.n	8004008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd fdee 	bl	8001b88 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fdea 	bl	8001b88 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e167      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e01b      	b.n	8004008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fdd7 	bl	8001b88 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e00e      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fd fdd3 	bl	8001b88 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d907      	bls.n	8003ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e150      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	4b88      	ldr	r3, [pc, #544]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ea      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8097 	beq.w	8004144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b81      	ldr	r3, [pc, #516]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	4b7d      	ldr	r3, [pc, #500]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a7c      	ldr	r2, [pc, #496]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
 8004036:	4b7a      	ldr	r3, [pc, #488]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b77      	ldr	r3, [pc, #476]	; (8004224 <HAL_RCC_OscConfig+0x474>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b74      	ldr	r3, [pc, #464]	; (8004224 <HAL_RCC_OscConfig+0x474>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a73      	ldr	r2, [pc, #460]	; (8004224 <HAL_RCC_OscConfig+0x474>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fd fd93 	bl	8001b88 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd fd8f 	bl	8001b88 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e10c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_OscConfig+0x474>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x2ea>
 800408c:	4b64      	ldr	r3, [pc, #400]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a63      	ldr	r2, [pc, #396]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	e01c      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x30c>
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a5e      	ldr	r2, [pc, #376]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	4b5c      	ldr	r3, [pc, #368]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 80040bc:	4b58      	ldr	r3, [pc, #352]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a57      	ldr	r2, [pc, #348]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	4b55      	ldr	r3, [pc, #340]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a54      	ldr	r2, [pc, #336]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ce:	f023 0304 	bic.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd fd54 	bl	8001b88 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd fd50 	bl	8001b88 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0cb      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	4b49      	ldr	r3, [pc, #292]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_RCC_OscConfig+0x334>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fd fd3e 	bl	8001b88 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd fd3a 	bl	8001b88 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0b5      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ee      	bne.n	8004110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	4a38      	ldr	r2, [pc, #224]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a1 	beq.w	8004290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414e:	4b34      	ldr	r3, [pc, #208]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d05c      	beq.n	8004214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d141      	bne.n	80041e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <HAL_RCC_OscConfig+0x478>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd fd0e 	bl	8001b88 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fd0a 	bl	8001b88 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e087      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	491b      	ldr	r1, [pc, #108]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x478>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fd fce3 	bl	8001b88 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fd fcdf 	bl	8001b88 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e05c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x416>
 80041e4:	e054      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_RCC_OscConfig+0x478>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fd fccc 	bl	8001b88 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd fcc8 	bl	8001b88 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e045      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_OscConfig+0x470>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x444>
 8004212:	e03d      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e038      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8004220:	40023800 	.word	0x40023800
 8004224:	40007000 	.word	0x40007000
 8004228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d028      	beq.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d121      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d11a      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cc      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90c      	bls.n	80042dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b63      	ldr	r3, [pc, #396]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b8      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f4:	4b59      	ldr	r3, [pc, #356]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	494d      	ldr	r1, [pc, #308]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d044      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	2b03      	cmp	r3, #3
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e067      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4934      	ldr	r1, [pc, #208]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fd fbfa 	bl	8001b88 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fd fbf6 	bl	8001b88 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20c      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e032      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4916      	ldr	r1, [pc, #88]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	490e      	ldr	r1, [pc, #56]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004426:	f000 f821 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800442a:	4602      	mov	r2, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	490a      	ldr	r1, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	5ccb      	ldrb	r3, [r1, r3]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fb5a 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00
 800445c:	40023800 	.word	0x40023800
 8004460:	08005e30 	.word	0x08005e30
 8004464:	20000000 	.word	0x20000000
 8004468:	20000004 	.word	0x20000004

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b094      	sub	sp, #80	; 0x50
 8004472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	647b      	str	r3, [r7, #68]	; 0x44
 8004478:	2300      	movs	r3, #0
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800447c:	2300      	movs	r3, #0
 800447e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004484:	4b79      	ldr	r3, [pc, #484]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x40>
 8004490:	2b08      	cmp	r3, #8
 8004492:	f200 80e1 	bhi.w	8004658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x34>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800449e:	e0db      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b73      	ldr	r3, [pc, #460]	; (8004670 <HAL_RCC_GetSysClockFreq+0x204>)
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044a4:	e0db      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <HAL_RCC_GetSysClockFreq+0x208>)
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044aa:	e0d8      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b6:	4b6d      	ldr	r3, [pc, #436]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d063      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4b6a      	ldr	r3, [pc, #424]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	2200      	movs	r2, #0
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80044cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d4:	633b      	str	r3, [r7, #48]	; 0x30
 80044d6:	2300      	movs	r3, #0
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	0159      	lsls	r1, r3, #5
 80044ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f0:	0150      	lsls	r0, r2, #5
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4621      	mov	r1, r4
 80044f8:	1a51      	subs	r1, r2, r1
 80044fa:	6139      	str	r1, [r7, #16]
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004510:	4659      	mov	r1, fp
 8004512:	018b      	lsls	r3, r1, #6
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800451a:	4651      	mov	r1, sl
 800451c:	018a      	lsls	r2, r1, #6
 800451e:	4651      	mov	r1, sl
 8004520:	ebb2 0801 	subs.w	r8, r2, r1
 8004524:	4659      	mov	r1, fp
 8004526:	eb63 0901 	sbc.w	r9, r3, r1
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800453a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800453e:	4690      	mov	r8, r2
 8004540:	4699      	mov	r9, r3
 8004542:	4623      	mov	r3, r4
 8004544:	eb18 0303 	adds.w	r3, r8, r3
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	462b      	mov	r3, r5
 800454c:	eb49 0303 	adc.w	r3, r9, r3
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800455e:	4629      	mov	r1, r5
 8004560:	024b      	lsls	r3, r1, #9
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004568:	4621      	mov	r1, r4
 800456a:	024a      	lsls	r2, r1, #9
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004572:	2200      	movs	r2, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800457c:	f7fc f9c6 	bl	800090c <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004588:	e058      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	2200      	movs	r2, #0
 8004592:	4618      	mov	r0, r3
 8004594:	4611      	mov	r1, r2
 8004596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800459a:	623b      	str	r3, [r7, #32]
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	0159      	lsls	r1, r3, #5
 80045b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b6:	0150      	lsls	r0, r2, #5
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4641      	mov	r1, r8
 80045be:	ebb2 0a01 	subs.w	sl, r2, r1
 80045c2:	4649      	mov	r1, r9
 80045c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045dc:	ebb2 040a 	subs.w	r4, r2, sl
 80045e0:	eb63 050b 	sbc.w	r5, r3, fp
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	00eb      	lsls	r3, r5, #3
 80045ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f2:	00e2      	lsls	r2, r4, #3
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	4643      	mov	r3, r8
 80045fa:	18e3      	adds	r3, r4, r3
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	464b      	mov	r3, r9
 8004600:	eb45 0303 	adc.w	r3, r5, r3
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004612:	4629      	mov	r1, r5
 8004614:	028b      	lsls	r3, r1, #10
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800461c:	4621      	mov	r1, r4
 800461e:	028a      	lsls	r2, r1, #10
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004626:	2200      	movs	r2, #0
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	61fa      	str	r2, [r7, #28]
 800462c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004630:	f7fc f96c 	bl	800090c <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800464c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800464e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004656:	e002      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetSysClockFreq+0x204>)
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800465c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004660:	4618      	mov	r0, r3
 8004662:	3750      	adds	r7, #80	; 0x50
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400
 8004674:	007a1200 	.word	0x007a1200

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a9b      	lsrs	r3, r3, #10
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08005e40 	.word	0x08005e40

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046bc:	f7ff ffdc 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	; (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08005e40 	.word	0x08005e40

080046e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e03f      	b.n	8004772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd f89a 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f929 	bl	800497c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af02      	add	r7, sp, #8
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d17c      	bne.n	8004894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit+0x2c>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e075      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x3e>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e06e      	b.n	8004896 <HAL_UART_Transmit+0x11c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fd f9db 	bl	8001b88 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d108      	bne.n	80047fc <HAL_UART_Transmit+0x82>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e003      	b.n	8004804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800480c:	e02a      	b.n	8004864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f840 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e036      	b.n	8004896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e007      	b.n	8004856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1cf      	bne.n	800480e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f810 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b090      	sub	sp, #64	; 0x40
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	e050      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b6:	d04c      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x30>
 80048be:	f7fd f963 	bl	8001b88 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d241      	bcs.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ee:	637a      	str	r2, [r7, #52]	; 0x34
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e5      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	613b      	str	r3, [r7, #16]
   return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004922:	623a      	str	r2, [r7, #32]
 8004924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	69f9      	ldr	r1, [r7, #28]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00f      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d09f      	beq.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3740      	adds	r7, #64	; 0x40
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b0c0      	sub	sp, #256	; 0x100
 8004982:	af00      	add	r7, sp, #0
 8004984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	68d9      	ldr	r1, [r3, #12]
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	ea40 0301 	orr.w	r3, r0, r1
 80049a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d4:	f021 010c 	bic.w	r1, r1, #12
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049e2:	430b      	orrs	r3, r1
 80049e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	ea40 0301 	orr.w	r3, r0, r1
 8004a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8f      	ldr	r3, [pc, #572]	; (8004c48 <UART_SetConfig+0x2cc>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0xa0>
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <UART_SetConfig+0x2d0>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7ff fe4c 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8004a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a24:	e003      	b.n	8004a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a26:	f7ff fe33 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8004a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	f040 810c 	bne.w	8004c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a56:	415b      	adcs	r3, r3
 8004a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a5e:	4621      	mov	r1, r4
 8004a60:	eb12 0801 	adds.w	r8, r2, r1
 8004a64:	4629      	mov	r1, r5
 8004a66:	eb43 0901 	adc.w	r9, r3, r1
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7e:	4690      	mov	r8, r2
 8004a80:	4699      	mov	r9, r3
 8004a82:	4623      	mov	r3, r4
 8004a84:	eb18 0303 	adds.w	r3, r8, r3
 8004a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	eb49 0303 	adc.w	r3, r9, r3
 8004a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aaa:	460b      	mov	r3, r1
 8004aac:	18db      	adds	r3, r3, r3
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac0:	f7fb ff24 	bl	800090c <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aec:	415b      	adcs	r3, r3
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004af4:	4641      	mov	r1, r8
 8004af6:	eb12 0a01 	adds.w	sl, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0b01 	adc.w	fp, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b14:	4692      	mov	sl, r2
 8004b16:	469b      	mov	fp, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b22:	464b      	mov	r3, r9
 8004b24:	eb4b 0303 	adc.w	r3, fp, r3
 8004b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	643b      	str	r3, [r7, #64]	; 0x40
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b56:	f7fb fed9 	bl	800090c <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004b62:	fba3 2301 	umull	r2, r3, r3, r1
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2264      	movs	r2, #100	; 0x64
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	1acb      	subs	r3, r1, r3
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004b78:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6339      	str	r1, [r7, #48]	; 0x30
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	18db      	adds	r3, r3, r3
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c02:	4613      	mov	r3, r2
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c12:	f7fb fe7b 	bl	800090c <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 0207 	and.w	r2, r3, #7
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4422      	add	r2, r4
 8004c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c44:	e105      	b.n	8004e52 <UART_SetConfig+0x4d6>
 8004c46:	bf00      	nop
 8004c48:	40011000 	.word	0x40011000
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	6239      	str	r1, [r7, #32]
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c76:	4641      	mov	r1, r8
 8004c78:	1854      	adds	r4, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb43 0501 	adc.w	r5, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	00eb      	lsls	r3, r5, #3
 8004c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c8e:	00e2      	lsls	r2, r4, #3
 8004c90:	4614      	mov	r4, r2
 8004c92:	461d      	mov	r5, r3
 8004c94:	4643      	mov	r3, r8
 8004c96:	18e3      	adds	r3, r4, r3
 8004c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ccc:	4621      	mov	r1, r4
 8004cce:	008a      	lsls	r2, r1, #2
 8004cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cd4:	f7fb fe1a 	bl	800090c <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b60      	ldr	r3, [pc, #384]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011c      	lsls	r4, r3, #4
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	61b9      	str	r1, [r7, #24]
 8004d00:	415b      	adcs	r3, r3
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6139      	str	r1, [r7, #16]
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d72:	f7fb fdcb 	bl	800090c <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a34      	ldr	r2, [pc, #208]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9a:	441c      	add	r4, r3
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da0:	2200      	movs	r2, #0
 8004da2:	673b      	str	r3, [r7, #112]	; 0x70
 8004da4:	677a      	str	r2, [r7, #116]	; 0x74
 8004da6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dba:	4641      	mov	r1, r8
 8004dbc:	1851      	adds	r1, r2, r1
 8004dbe:	6039      	str	r1, [r7, #0]
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	414b      	adcs	r3, r1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	00cb      	lsls	r3, r1, #3
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ddc:	4651      	mov	r1, sl
 8004dde:	00ca      	lsls	r2, r1, #3
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	4642      	mov	r2, r8
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004e00:	667a      	str	r2, [r7, #100]	; 0x64
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e0e:	4649      	mov	r1, r9
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4641      	mov	r1, r8
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4641      	mov	r1, r8
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e20:	f7fb fd74 	bl	800090c <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2164      	movs	r1, #100	; 0x64
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	3332      	adds	r3, #50	; 0x32
 8004e3c:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4422      	add	r2, r4
 8004e50:	609a      	str	r2, [r3, #8]
}
 8004e52:	bf00      	nop
 8004e54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	51eb851f 	.word	0x51eb851f

08004e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e64:	b084      	sub	sp, #16
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	f107 001c 	add.w	r0, r7, #28
 8004e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d122      	bne.n	8004ec2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 faa2 	bl	8005400 <USB_CoreReset>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e01a      	b.n	8004ef8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fa96 	bl	8005400 <USB_CoreReset>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eea:	e005      	b.n	8004ef8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10b      	bne.n	8004f16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f043 0206 	orr.w	r2, r3, #6
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f22:	b004      	add	sp, #16
 8004f24:	4770      	bx	lr

08004f26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d115      	bne.n	8004f96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7fc fe12 	bl	8001ba0 <HAL_Delay>
      ms++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa2e 	bl	80053e4 <USB_GetMode>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d01e      	beq.n	8004fcc <USB_SetCurrentMode+0x84>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b31      	cmp	r3, #49	; 0x31
 8004f92:	d9f0      	bls.n	8004f76 <USB_SetCurrentMode+0x2e>
 8004f94:	e01a      	b.n	8004fcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d115      	bne.n	8004fc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7fc fdf9 	bl	8001ba0 <HAL_Delay>
      ms++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa15 	bl	80053e4 <USB_GetMode>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <USB_SetCurrentMode+0x84>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b31      	cmp	r3, #49	; 0x31
 8004fc4:	d9f0      	bls.n	8004fa8 <USB_SetCurrentMode+0x60>
 8004fc6:	e001      	b.n	8004fcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e005      	b.n	8004fd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b32      	cmp	r3, #50	; 0x32
 8004fd0:	d101      	bne.n	8004fd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e009      	b.n	8005014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3340      	adds	r3, #64	; 0x40
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0e      	cmp	r3, #14
 8005018:	d9f2      	bls.n	8005000 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11c      	bne.n	800505a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
 8005058:	e00b      	b.n	8005072 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	4619      	mov	r1, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508c:	461a      	mov	r2, r3
 800508e:	680b      	ldr	r3, [r1, #0]
 8005090:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10c      	bne.n	80050b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f965 	bl	8005370 <USB_SetDevSpeed>
 80050a6:	e008      	b.n	80050ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050a8:	2101      	movs	r1, #1
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f960 	bl	8005370 <USB_SetDevSpeed>
 80050b0:	e003      	b.n	80050ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b2:	2103      	movs	r1, #3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f95b 	bl	8005370 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ba:	2110      	movs	r1, #16
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8f3 	bl	80052a8 <USB_FlushTxFifo>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f91f 	bl	8005310 <USB_FlushRxFifo>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	461a      	mov	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e043      	b.n	800518e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511c:	d118      	bne.n	8005150 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	461a      	mov	r2, r3
 8005132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e013      	b.n	8005162 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e008      	b.n	8005162 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3301      	adds	r3, #1
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3b7      	bcc.n	8005106 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e043      	b.n	8005224 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b2:	d118      	bne.n	80051e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	461a      	mov	r2, r3
 80051c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e013      	b.n	80051f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e008      	b.n	80051f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	2300      	movs	r3, #0
 8005208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800521c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3301      	adds	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d3b7      	bcc.n	800519c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800523a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f043 0210 	orr.w	r2, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <USB_DevInit+0x2c4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a0:	b004      	add	sp, #16
 80052a2:	4770      	bx	lr
 80052a4:	803c3800 	.word	0x803c3800

080052a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <USB_FlushTxFifo+0x64>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e01b      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	daf2      	bge.n	80052b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	019b      	lsls	r3, r3, #6
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <USB_FlushTxFifo+0x64>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e006      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d0f0      	beq.n	80052e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	00030d40 	.word	0x00030d40

08005310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <USB_FlushRxFifo+0x5c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e018      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	daf2      	bge.n	800531c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2210      	movs	r2, #16
 800533e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <USB_FlushRxFifo+0x5c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b10      	cmp	r3, #16
 800535c:	d0f0      	beq.n	8005340 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	00030d40 	.word	0x00030d40

08005370 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053bc:	f023 0303 	bic.w	r3, r3, #3
 80053c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d0:	f043 0302 	orr.w	r3, r3, #2
 80053d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0301 	and.w	r3, r3, #1
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <USB_CoreReset+0x64>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e01b      	b.n	8005456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	daf2      	bge.n	800540c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <USB_CoreReset+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e006      	b.n	8005456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d0f0      	beq.n	8005436 <USB_CoreReset+0x36>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	00030d40 	.word	0x00030d40

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	; (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	2000000c 	.word	0x2000000c

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f000 fc8e 	bl	8005da8 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	08005e84 	.word	0x08005e84
 80054b0:	08005e84 	.word	0x08005e84
 80054b4:	08005e84 	.word	0x08005e84
 80054b8:	08005e88 	.word	0x08005e88

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <siprintf>:
 80054cc:	b40e      	push	{r1, r2, r3}
 80054ce:	b500      	push	{lr}
 80054d0:	b09c      	sub	sp, #112	; 0x70
 80054d2:	ab1d      	add	r3, sp, #116	; 0x74
 80054d4:	9002      	str	r0, [sp, #8]
 80054d6:	9006      	str	r0, [sp, #24]
 80054d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054dc:	4809      	ldr	r0, [pc, #36]	; (8005504 <siprintf+0x38>)
 80054de:	9107      	str	r1, [sp, #28]
 80054e0:	9104      	str	r1, [sp, #16]
 80054e2:	4909      	ldr	r1, [pc, #36]	; (8005508 <siprintf+0x3c>)
 80054e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	a902      	add	r1, sp, #8
 80054f0:	f000 f868 	bl	80055c4 <_svfiprintf_r>
 80054f4:	9b02      	ldr	r3, [sp, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	2000000c 	.word	0x2000000c
 8005508:	ffff0208 	.word	0xffff0208

0800550c <__ssputs_r>:
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	688e      	ldr	r6, [r1, #8]
 8005512:	429e      	cmp	r6, r3
 8005514:	4682      	mov	sl, r0
 8005516:	460c      	mov	r4, r1
 8005518:	4690      	mov	r8, r2
 800551a:	461f      	mov	r7, r3
 800551c:	d838      	bhi.n	8005590 <__ssputs_r+0x84>
 800551e:	898a      	ldrh	r2, [r1, #12]
 8005520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005524:	d032      	beq.n	800558c <__ssputs_r+0x80>
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	6909      	ldr	r1, [r1, #16]
 800552a:	eba5 0901 	sub.w	r9, r5, r1
 800552e:	6965      	ldr	r5, [r4, #20]
 8005530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005538:	3301      	adds	r3, #1
 800553a:	444b      	add	r3, r9
 800553c:	106d      	asrs	r5, r5, #1
 800553e:	429d      	cmp	r5, r3
 8005540:	bf38      	it	cc
 8005542:	461d      	movcc	r5, r3
 8005544:	0553      	lsls	r3, r2, #21
 8005546:	d531      	bpl.n	80055ac <__ssputs_r+0xa0>
 8005548:	4629      	mov	r1, r5
 800554a:	f000 fb63 	bl	8005c14 <_malloc_r>
 800554e:	4606      	mov	r6, r0
 8005550:	b950      	cbnz	r0, 8005568 <__ssputs_r+0x5c>
 8005552:	230c      	movs	r3, #12
 8005554:	f8ca 3000 	str.w	r3, [sl]
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	6921      	ldr	r1, [r4, #16]
 800556a:	464a      	mov	r2, r9
 800556c:	f000 fabe 	bl	8005aec <memcpy>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	6126      	str	r6, [r4, #16]
 800557e:	6165      	str	r5, [r4, #20]
 8005580:	444e      	add	r6, r9
 8005582:	eba5 0509 	sub.w	r5, r5, r9
 8005586:	6026      	str	r6, [r4, #0]
 8005588:	60a5      	str	r5, [r4, #8]
 800558a:	463e      	mov	r6, r7
 800558c:	42be      	cmp	r6, r7
 800558e:	d900      	bls.n	8005592 <__ssputs_r+0x86>
 8005590:	463e      	mov	r6, r7
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	4632      	mov	r2, r6
 8005596:	4641      	mov	r1, r8
 8005598:	f000 fab6 	bl	8005b08 <memmove>
 800559c:	68a3      	ldr	r3, [r4, #8]
 800559e:	1b9b      	subs	r3, r3, r6
 80055a0:	60a3      	str	r3, [r4, #8]
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	4433      	add	r3, r6
 80055a6:	6023      	str	r3, [r4, #0]
 80055a8:	2000      	movs	r0, #0
 80055aa:	e7db      	b.n	8005564 <__ssputs_r+0x58>
 80055ac:	462a      	mov	r2, r5
 80055ae:	f000 fba5 	bl	8005cfc <_realloc_r>
 80055b2:	4606      	mov	r6, r0
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d1e1      	bne.n	800557c <__ssputs_r+0x70>
 80055b8:	6921      	ldr	r1, [r4, #16]
 80055ba:	4650      	mov	r0, sl
 80055bc:	f000 fabe 	bl	8005b3c <_free_r>
 80055c0:	e7c7      	b.n	8005552 <__ssputs_r+0x46>
	...

080055c4 <_svfiprintf_r>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	4698      	mov	r8, r3
 80055ca:	898b      	ldrh	r3, [r1, #12]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	b09d      	sub	sp, #116	; 0x74
 80055d0:	4607      	mov	r7, r0
 80055d2:	460d      	mov	r5, r1
 80055d4:	4614      	mov	r4, r2
 80055d6:	d50e      	bpl.n	80055f6 <_svfiprintf_r+0x32>
 80055d8:	690b      	ldr	r3, [r1, #16]
 80055da:	b963      	cbnz	r3, 80055f6 <_svfiprintf_r+0x32>
 80055dc:	2140      	movs	r1, #64	; 0x40
 80055de:	f000 fb19 	bl	8005c14 <_malloc_r>
 80055e2:	6028      	str	r0, [r5, #0]
 80055e4:	6128      	str	r0, [r5, #16]
 80055e6:	b920      	cbnz	r0, 80055f2 <_svfiprintf_r+0x2e>
 80055e8:	230c      	movs	r3, #12
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f0:	e0d1      	b.n	8005796 <_svfiprintf_r+0x1d2>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	616b      	str	r3, [r5, #20]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9309      	str	r3, [sp, #36]	; 0x24
 80055fa:	2320      	movs	r3, #32
 80055fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005600:	f8cd 800c 	str.w	r8, [sp, #12]
 8005604:	2330      	movs	r3, #48	; 0x30
 8005606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057b0 <_svfiprintf_r+0x1ec>
 800560a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800560e:	f04f 0901 	mov.w	r9, #1
 8005612:	4623      	mov	r3, r4
 8005614:	469a      	mov	sl, r3
 8005616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800561a:	b10a      	cbz	r2, 8005620 <_svfiprintf_r+0x5c>
 800561c:	2a25      	cmp	r2, #37	; 0x25
 800561e:	d1f9      	bne.n	8005614 <_svfiprintf_r+0x50>
 8005620:	ebba 0b04 	subs.w	fp, sl, r4
 8005624:	d00b      	beq.n	800563e <_svfiprintf_r+0x7a>
 8005626:	465b      	mov	r3, fp
 8005628:	4622      	mov	r2, r4
 800562a:	4629      	mov	r1, r5
 800562c:	4638      	mov	r0, r7
 800562e:	f7ff ff6d 	bl	800550c <__ssputs_r>
 8005632:	3001      	adds	r0, #1
 8005634:	f000 80aa 	beq.w	800578c <_svfiprintf_r+0x1c8>
 8005638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800563a:	445a      	add	r2, fp
 800563c:	9209      	str	r2, [sp, #36]	; 0x24
 800563e:	f89a 3000 	ldrb.w	r3, [sl]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a2 	beq.w	800578c <_svfiprintf_r+0x1c8>
 8005648:	2300      	movs	r3, #0
 800564a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800564e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005652:	f10a 0a01 	add.w	sl, sl, #1
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565e:	931a      	str	r3, [sp, #104]	; 0x68
 8005660:	4654      	mov	r4, sl
 8005662:	2205      	movs	r2, #5
 8005664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005668:	4851      	ldr	r0, [pc, #324]	; (80057b0 <_svfiprintf_r+0x1ec>)
 800566a:	f7fa fdc9 	bl	8000200 <memchr>
 800566e:	9a04      	ldr	r2, [sp, #16]
 8005670:	b9d8      	cbnz	r0, 80056aa <_svfiprintf_r+0xe6>
 8005672:	06d0      	lsls	r0, r2, #27
 8005674:	bf44      	itt	mi
 8005676:	2320      	movmi	r3, #32
 8005678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800567c:	0711      	lsls	r1, r2, #28
 800567e:	bf44      	itt	mi
 8005680:	232b      	movmi	r3, #43	; 0x2b
 8005682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005686:	f89a 3000 	ldrb.w	r3, [sl]
 800568a:	2b2a      	cmp	r3, #42	; 0x2a
 800568c:	d015      	beq.n	80056ba <_svfiprintf_r+0xf6>
 800568e:	9a07      	ldr	r2, [sp, #28]
 8005690:	4654      	mov	r4, sl
 8005692:	2000      	movs	r0, #0
 8005694:	f04f 0c0a 	mov.w	ip, #10
 8005698:	4621      	mov	r1, r4
 800569a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569e:	3b30      	subs	r3, #48	; 0x30
 80056a0:	2b09      	cmp	r3, #9
 80056a2:	d94e      	bls.n	8005742 <_svfiprintf_r+0x17e>
 80056a4:	b1b0      	cbz	r0, 80056d4 <_svfiprintf_r+0x110>
 80056a6:	9207      	str	r2, [sp, #28]
 80056a8:	e014      	b.n	80056d4 <_svfiprintf_r+0x110>
 80056aa:	eba0 0308 	sub.w	r3, r0, r8
 80056ae:	fa09 f303 	lsl.w	r3, r9, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	46a2      	mov	sl, r4
 80056b8:	e7d2      	b.n	8005660 <_svfiprintf_r+0x9c>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	1d19      	adds	r1, r3, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	9103      	str	r1, [sp, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bfbb      	ittet	lt
 80056c6:	425b      	neglt	r3, r3
 80056c8:	f042 0202 	orrlt.w	r2, r2, #2
 80056cc:	9307      	strge	r3, [sp, #28]
 80056ce:	9307      	strlt	r3, [sp, #28]
 80056d0:	bfb8      	it	lt
 80056d2:	9204      	strlt	r2, [sp, #16]
 80056d4:	7823      	ldrb	r3, [r4, #0]
 80056d6:	2b2e      	cmp	r3, #46	; 0x2e
 80056d8:	d10c      	bne.n	80056f4 <_svfiprintf_r+0x130>
 80056da:	7863      	ldrb	r3, [r4, #1]
 80056dc:	2b2a      	cmp	r3, #42	; 0x2a
 80056de:	d135      	bne.n	800574c <_svfiprintf_r+0x188>
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	9203      	str	r2, [sp, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfb8      	it	lt
 80056ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056f0:	3402      	adds	r4, #2
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057c0 <_svfiprintf_r+0x1fc>
 80056f8:	7821      	ldrb	r1, [r4, #0]
 80056fa:	2203      	movs	r2, #3
 80056fc:	4650      	mov	r0, sl
 80056fe:	f7fa fd7f 	bl	8000200 <memchr>
 8005702:	b140      	cbz	r0, 8005716 <_svfiprintf_r+0x152>
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	eba0 000a 	sub.w	r0, r0, sl
 800570a:	fa03 f000 	lsl.w	r0, r3, r0
 800570e:	9b04      	ldr	r3, [sp, #16]
 8005710:	4303      	orrs	r3, r0
 8005712:	3401      	adds	r4, #1
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571a:	4826      	ldr	r0, [pc, #152]	; (80057b4 <_svfiprintf_r+0x1f0>)
 800571c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005720:	2206      	movs	r2, #6
 8005722:	f7fa fd6d 	bl	8000200 <memchr>
 8005726:	2800      	cmp	r0, #0
 8005728:	d038      	beq.n	800579c <_svfiprintf_r+0x1d8>
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <_svfiprintf_r+0x1f4>)
 800572c:	bb1b      	cbnz	r3, 8005776 <_svfiprintf_r+0x1b2>
 800572e:	9b03      	ldr	r3, [sp, #12]
 8005730:	3307      	adds	r3, #7
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	3308      	adds	r3, #8
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573c:	4433      	add	r3, r6
 800573e:	9309      	str	r3, [sp, #36]	; 0x24
 8005740:	e767      	b.n	8005612 <_svfiprintf_r+0x4e>
 8005742:	fb0c 3202 	mla	r2, ip, r2, r3
 8005746:	460c      	mov	r4, r1
 8005748:	2001      	movs	r0, #1
 800574a:	e7a5      	b.n	8005698 <_svfiprintf_r+0xd4>
 800574c:	2300      	movs	r3, #0
 800574e:	3401      	adds	r4, #1
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	4619      	mov	r1, r3
 8005754:	f04f 0c0a 	mov.w	ip, #10
 8005758:	4620      	mov	r0, r4
 800575a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800575e:	3a30      	subs	r2, #48	; 0x30
 8005760:	2a09      	cmp	r2, #9
 8005762:	d903      	bls.n	800576c <_svfiprintf_r+0x1a8>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0c5      	beq.n	80056f4 <_svfiprintf_r+0x130>
 8005768:	9105      	str	r1, [sp, #20]
 800576a:	e7c3      	b.n	80056f4 <_svfiprintf_r+0x130>
 800576c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005770:	4604      	mov	r4, r0
 8005772:	2301      	movs	r3, #1
 8005774:	e7f0      	b.n	8005758 <_svfiprintf_r+0x194>
 8005776:	ab03      	add	r3, sp, #12
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	462a      	mov	r2, r5
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <_svfiprintf_r+0x1f8>)
 800577e:	a904      	add	r1, sp, #16
 8005780:	4638      	mov	r0, r7
 8005782:	f3af 8000 	nop.w
 8005786:	1c42      	adds	r2, r0, #1
 8005788:	4606      	mov	r6, r0
 800578a:	d1d6      	bne.n	800573a <_svfiprintf_r+0x176>
 800578c:	89ab      	ldrh	r3, [r5, #12]
 800578e:	065b      	lsls	r3, r3, #25
 8005790:	f53f af2c 	bmi.w	80055ec <_svfiprintf_r+0x28>
 8005794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005796:	b01d      	add	sp, #116	; 0x74
 8005798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579c:	ab03      	add	r3, sp, #12
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	462a      	mov	r2, r5
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <_svfiprintf_r+0x1f8>)
 80057a4:	a904      	add	r1, sp, #16
 80057a6:	4638      	mov	r0, r7
 80057a8:	f000 f87a 	bl	80058a0 <_printf_i>
 80057ac:	e7eb      	b.n	8005786 <_svfiprintf_r+0x1c2>
 80057ae:	bf00      	nop
 80057b0:	08005e48 	.word	0x08005e48
 80057b4:	08005e52 	.word	0x08005e52
 80057b8:	00000000 	.word	0x00000000
 80057bc:	0800550d 	.word	0x0800550d
 80057c0:	08005e4e 	.word	0x08005e4e

080057c4 <_printf_common>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	4616      	mov	r6, r2
 80057ca:	4699      	mov	r9, r3
 80057cc:	688a      	ldr	r2, [r1, #8]
 80057ce:	690b      	ldr	r3, [r1, #16]
 80057d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bfb8      	it	lt
 80057d8:	4613      	movlt	r3, r2
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e0:	4607      	mov	r7, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	b10a      	cbz	r2, 80057ea <_printf_common+0x26>
 80057e6:	3301      	adds	r3, #1
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	0699      	lsls	r1, r3, #26
 80057ee:	bf42      	ittt	mi
 80057f0:	6833      	ldrmi	r3, [r6, #0]
 80057f2:	3302      	addmi	r3, #2
 80057f4:	6033      	strmi	r3, [r6, #0]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d106      	bne.n	800580c <_printf_common+0x48>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	6832      	ldr	r2, [r6, #0]
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	42ab      	cmp	r3, r5
 800580a:	dc26      	bgt.n	800585a <_printf_common+0x96>
 800580c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005810:	1e13      	subs	r3, r2, #0
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	bf18      	it	ne
 8005816:	2301      	movne	r3, #1
 8005818:	0692      	lsls	r2, r2, #26
 800581a:	d42b      	bmi.n	8005874 <_printf_common+0xb0>
 800581c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d01e      	beq.n	8005868 <_printf_common+0xa4>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	68e5      	ldr	r5, [r4, #12]
 800582e:	6832      	ldr	r2, [r6, #0]
 8005830:	f003 0306 	and.w	r3, r3, #6
 8005834:	2b04      	cmp	r3, #4
 8005836:	bf08      	it	eq
 8005838:	1aad      	subeq	r5, r5, r2
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	bf0c      	ite	eq
 8005840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005844:	2500      	movne	r5, #0
 8005846:	4293      	cmp	r3, r2
 8005848:	bfc4      	itt	gt
 800584a:	1a9b      	subgt	r3, r3, r2
 800584c:	18ed      	addgt	r5, r5, r3
 800584e:	2600      	movs	r6, #0
 8005850:	341a      	adds	r4, #26
 8005852:	42b5      	cmp	r5, r6
 8005854:	d11a      	bne.n	800588c <_printf_common+0xc8>
 8005856:	2000      	movs	r0, #0
 8005858:	e008      	b.n	800586c <_printf_common+0xa8>
 800585a:	2301      	movs	r3, #1
 800585c:	4652      	mov	r2, sl
 800585e:	4649      	mov	r1, r9
 8005860:	4638      	mov	r0, r7
 8005862:	47c0      	blx	r8
 8005864:	3001      	adds	r0, #1
 8005866:	d103      	bne.n	8005870 <_printf_common+0xac>
 8005868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005870:	3501      	adds	r5, #1
 8005872:	e7c6      	b.n	8005802 <_printf_common+0x3e>
 8005874:	18e1      	adds	r1, r4, r3
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	2030      	movs	r0, #48	; 0x30
 800587a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587e:	4422      	add	r2, r4
 8005880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005888:	3302      	adds	r3, #2
 800588a:	e7c7      	b.n	800581c <_printf_common+0x58>
 800588c:	2301      	movs	r3, #1
 800588e:	4622      	mov	r2, r4
 8005890:	4649      	mov	r1, r9
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	3001      	adds	r0, #1
 8005898:	d0e6      	beq.n	8005868 <_printf_common+0xa4>
 800589a:	3601      	adds	r6, #1
 800589c:	e7d9      	b.n	8005852 <_printf_common+0x8e>
	...

080058a0 <_printf_i>:
 80058a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	7e0f      	ldrb	r7, [r1, #24]
 80058a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058a8:	2f78      	cmp	r7, #120	; 0x78
 80058aa:	4691      	mov	r9, r2
 80058ac:	4680      	mov	r8, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	469a      	mov	sl, r3
 80058b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058b6:	d807      	bhi.n	80058c8 <_printf_i+0x28>
 80058b8:	2f62      	cmp	r7, #98	; 0x62
 80058ba:	d80a      	bhi.n	80058d2 <_printf_i+0x32>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	f000 80d8 	beq.w	8005a72 <_printf_i+0x1d2>
 80058c2:	2f58      	cmp	r7, #88	; 0x58
 80058c4:	f000 80a3 	beq.w	8005a0e <_printf_i+0x16e>
 80058c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d0:	e03a      	b.n	8005948 <_printf_i+0xa8>
 80058d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058d6:	2b15      	cmp	r3, #21
 80058d8:	d8f6      	bhi.n	80058c8 <_printf_i+0x28>
 80058da:	a101      	add	r1, pc, #4	; (adr r1, 80058e0 <_printf_i+0x40>)
 80058dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e0:	08005939 	.word	0x08005939
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	080058c9 	.word	0x080058c9
 80058ec:	080058c9 	.word	0x080058c9
 80058f0:	080058c9 	.word	0x080058c9
 80058f4:	080058c9 	.word	0x080058c9
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	080058c9 	.word	0x080058c9
 8005900:	080058c9 	.word	0x080058c9
 8005904:	080058c9 	.word	0x080058c9
 8005908:	080058c9 	.word	0x080058c9
 800590c:	08005a59 	.word	0x08005a59
 8005910:	0800597d 	.word	0x0800597d
 8005914:	08005a3b 	.word	0x08005a3b
 8005918:	080058c9 	.word	0x080058c9
 800591c:	080058c9 	.word	0x080058c9
 8005920:	08005a7b 	.word	0x08005a7b
 8005924:	080058c9 	.word	0x080058c9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058c9 	.word	0x080058c9
 8005930:	080058c9 	.word	0x080058c9
 8005934:	08005a43 	.word	0x08005a43
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005948:	2301      	movs	r3, #1
 800594a:	e0a3      	b.n	8005a94 <_printf_i+0x1f4>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	6829      	ldr	r1, [r5, #0]
 8005950:	0606      	lsls	r6, r0, #24
 8005952:	f101 0304 	add.w	r3, r1, #4
 8005956:	d50a      	bpl.n	800596e <_printf_i+0xce>
 8005958:	680e      	ldr	r6, [r1, #0]
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	2e00      	cmp	r6, #0
 800595e:	da03      	bge.n	8005968 <_printf_i+0xc8>
 8005960:	232d      	movs	r3, #45	; 0x2d
 8005962:	4276      	negs	r6, r6
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	485e      	ldr	r0, [pc, #376]	; (8005ae4 <_printf_i+0x244>)
 800596a:	230a      	movs	r3, #10
 800596c:	e019      	b.n	80059a2 <_printf_i+0x102>
 800596e:	680e      	ldr	r6, [r1, #0]
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005976:	bf18      	it	ne
 8005978:	b236      	sxthne	r6, r6
 800597a:	e7ef      	b.n	800595c <_printf_i+0xbc>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1d19      	adds	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	0601      	lsls	r1, r0, #24
 8005986:	d501      	bpl.n	800598c <_printf_i+0xec>
 8005988:	681e      	ldr	r6, [r3, #0]
 800598a:	e002      	b.n	8005992 <_printf_i+0xf2>
 800598c:	0646      	lsls	r6, r0, #25
 800598e:	d5fb      	bpl.n	8005988 <_printf_i+0xe8>
 8005990:	881e      	ldrh	r6, [r3, #0]
 8005992:	4854      	ldr	r0, [pc, #336]	; (8005ae4 <_printf_i+0x244>)
 8005994:	2f6f      	cmp	r7, #111	; 0x6f
 8005996:	bf0c      	ite	eq
 8005998:	2308      	moveq	r3, #8
 800599a:	230a      	movne	r3, #10
 800599c:	2100      	movs	r1, #0
 800599e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a2:	6865      	ldr	r5, [r4, #4]
 80059a4:	60a5      	str	r5, [r4, #8]
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	bfa2      	ittt	ge
 80059aa:	6821      	ldrge	r1, [r4, #0]
 80059ac:	f021 0104 	bicge.w	r1, r1, #4
 80059b0:	6021      	strge	r1, [r4, #0]
 80059b2:	b90e      	cbnz	r6, 80059b8 <_printf_i+0x118>
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	d04d      	beq.n	8005a54 <_printf_i+0x1b4>
 80059b8:	4615      	mov	r5, r2
 80059ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80059be:	fb03 6711 	mls	r7, r3, r1, r6
 80059c2:	5dc7      	ldrb	r7, [r0, r7]
 80059c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059c8:	4637      	mov	r7, r6
 80059ca:	42bb      	cmp	r3, r7
 80059cc:	460e      	mov	r6, r1
 80059ce:	d9f4      	bls.n	80059ba <_printf_i+0x11a>
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d10b      	bne.n	80059ec <_printf_i+0x14c>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	07de      	lsls	r6, r3, #31
 80059d8:	d508      	bpl.n	80059ec <_printf_i+0x14c>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	6861      	ldr	r1, [r4, #4]
 80059de:	4299      	cmp	r1, r3
 80059e0:	bfde      	ittt	le
 80059e2:	2330      	movle	r3, #48	; 0x30
 80059e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059ec:	1b52      	subs	r2, r2, r5
 80059ee:	6122      	str	r2, [r4, #16]
 80059f0:	f8cd a000 	str.w	sl, [sp]
 80059f4:	464b      	mov	r3, r9
 80059f6:	aa03      	add	r2, sp, #12
 80059f8:	4621      	mov	r1, r4
 80059fa:	4640      	mov	r0, r8
 80059fc:	f7ff fee2 	bl	80057c4 <_printf_common>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d14c      	bne.n	8005a9e <_printf_i+0x1fe>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a08:	b004      	add	sp, #16
 8005a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0e:	4835      	ldr	r0, [pc, #212]	; (8005ae4 <_printf_i+0x244>)
 8005a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a14:	6829      	ldr	r1, [r5, #0]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a1c:	6029      	str	r1, [r5, #0]
 8005a1e:	061d      	lsls	r5, r3, #24
 8005a20:	d514      	bpl.n	8005a4c <_printf_i+0x1ac>
 8005a22:	07df      	lsls	r7, r3, #31
 8005a24:	bf44      	itt	mi
 8005a26:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2a:	6023      	strmi	r3, [r4, #0]
 8005a2c:	b91e      	cbnz	r6, 8005a36 <_printf_i+0x196>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f023 0320 	bic.w	r3, r3, #32
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	2310      	movs	r3, #16
 8005a38:	e7b0      	b.n	800599c <_printf_i+0xfc>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f043 0320 	orr.w	r3, r3, #32
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	2378      	movs	r3, #120	; 0x78
 8005a44:	4828      	ldr	r0, [pc, #160]	; (8005ae8 <_printf_i+0x248>)
 8005a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a4a:	e7e3      	b.n	8005a14 <_printf_i+0x174>
 8005a4c:	0659      	lsls	r1, r3, #25
 8005a4e:	bf48      	it	mi
 8005a50:	b2b6      	uxthmi	r6, r6
 8005a52:	e7e6      	b.n	8005a22 <_printf_i+0x182>
 8005a54:	4615      	mov	r5, r2
 8005a56:	e7bb      	b.n	80059d0 <_printf_i+0x130>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	6826      	ldr	r6, [r4, #0]
 8005a5c:	6961      	ldr	r1, [r4, #20]
 8005a5e:	1d18      	adds	r0, r3, #4
 8005a60:	6028      	str	r0, [r5, #0]
 8005a62:	0635      	lsls	r5, r6, #24
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	d501      	bpl.n	8005a6c <_printf_i+0x1cc>
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	e002      	b.n	8005a72 <_printf_i+0x1d2>
 8005a6c:	0670      	lsls	r0, r6, #25
 8005a6e:	d5fb      	bpl.n	8005a68 <_printf_i+0x1c8>
 8005a70:	8019      	strh	r1, [r3, #0]
 8005a72:	2300      	movs	r3, #0
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	4615      	mov	r5, r2
 8005a78:	e7ba      	b.n	80059f0 <_printf_i+0x150>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	602a      	str	r2, [r5, #0]
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	2100      	movs	r1, #0
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7fa fbba 	bl	8000200 <memchr>
 8005a8c:	b108      	cbz	r0, 8005a92 <_printf_i+0x1f2>
 8005a8e:	1b40      	subs	r0, r0, r5
 8005a90:	6060      	str	r0, [r4, #4]
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	2300      	movs	r3, #0
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9c:	e7a8      	b.n	80059f0 <_printf_i+0x150>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	47d0      	blx	sl
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d0ab      	beq.n	8005a04 <_printf_i+0x164>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	079b      	lsls	r3, r3, #30
 8005ab0:	d413      	bmi.n	8005ada <_printf_i+0x23a>
 8005ab2:	68e0      	ldr	r0, [r4, #12]
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	bfb8      	it	lt
 8005aba:	4618      	movlt	r0, r3
 8005abc:	e7a4      	b.n	8005a08 <_printf_i+0x168>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d09b      	beq.n	8005a04 <_printf_i+0x164>
 8005acc:	3501      	adds	r5, #1
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	9903      	ldr	r1, [sp, #12]
 8005ad2:	1a5b      	subs	r3, r3, r1
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dcf2      	bgt.n	8005abe <_printf_i+0x21e>
 8005ad8:	e7eb      	b.n	8005ab2 <_printf_i+0x212>
 8005ada:	2500      	movs	r5, #0
 8005adc:	f104 0619 	add.w	r6, r4, #25
 8005ae0:	e7f5      	b.n	8005ace <_printf_i+0x22e>
 8005ae2:	bf00      	nop
 8005ae4:	08005e59 	.word	0x08005e59
 8005ae8:	08005e6a 	.word	0x08005e6a

08005aec <memcpy>:
 8005aec:	440a      	add	r2, r1
 8005aee:	4291      	cmp	r1, r2
 8005af0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005af4:	d100      	bne.n	8005af8 <memcpy+0xc>
 8005af6:	4770      	bx	lr
 8005af8:	b510      	push	{r4, lr}
 8005afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b02:	4291      	cmp	r1, r2
 8005b04:	d1f9      	bne.n	8005afa <memcpy+0xe>
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0402 	add.w	r4, r1, r2
 8005b10:	d902      	bls.n	8005b18 <memmove+0x10>
 8005b12:	4284      	cmp	r4, r0
 8005b14:	4623      	mov	r3, r4
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x20>
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	42a1      	cmp	r1, r4
 8005b1c:	d008      	beq.n	8005b30 <memmove+0x28>
 8005b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0x12>
 8005b28:	4402      	add	r2, r0
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x2a>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x24>

08005b3c <_free_r>:
 8005b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d044      	beq.n	8005bcc <_free_r+0x90>
 8005b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4e:	bfb8      	it	lt
 8005b50:	18e4      	addlt	r4, r4, r3
 8005b52:	f000 f913 	bl	8005d7c <__malloc_lock>
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <_free_r+0x94>)
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b933      	cbnz	r3, 8005b6c <_free_r+0x30>
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b68:	f000 b90e 	b.w	8005d88 <__malloc_unlock>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d908      	bls.n	8005b82 <_free_r+0x46>
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	1961      	adds	r1, r4, r5
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf01      	itttt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	1949      	addeq	r1, r1, r5
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	e7ed      	b.n	8005b5e <_free_r+0x22>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x50>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x46>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1855      	adds	r5, r2, r1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x70>
 8005b94:	6824      	ldr	r4, [r4, #0]
 8005b96:	4421      	add	r1, r4
 8005b98:	1854      	adds	r4, r2, r1
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1e0      	bne.n	8005b62 <_free_r+0x26>
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	4421      	add	r1, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	e7da      	b.n	8005b62 <_free_r+0x26>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x78>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	e7d6      	b.n	8005b62 <_free_r+0x26>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7ca      	b.n	8005b62 <_free_r+0x26>
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	200008b4 	.word	0x200008b4

08005bd4 <sbrk_aligned>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4e0e      	ldr	r6, [pc, #56]	; (8005c10 <sbrk_aligned+0x3c>)
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6831      	ldr	r1, [r6, #0]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b911      	cbnz	r1, 8005be6 <sbrk_aligned+0x12>
 8005be0:	f000 f8bc 	bl	8005d5c <_sbrk_r>
 8005be4:	6030      	str	r0, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f8b7 	bl	8005d5c <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d00a      	beq.n	8005c08 <sbrk_aligned+0x34>
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d007      	beq.n	8005c0c <sbrk_aligned+0x38>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f8ac 	bl	8005d5c <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d101      	bne.n	8005c0c <sbrk_aligned+0x38>
 8005c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	200008b8 	.word	0x200008b8

08005c14 <_malloc_r>:
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4607      	mov	r7, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d905      	bls.n	8005c3c <_malloc_r+0x28>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	2600      	movs	r6, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	4e2e      	ldr	r6, [pc, #184]	; (8005cf8 <_malloc_r+0xe4>)
 8005c3e:	f000 f89d 	bl	8005d7c <__malloc_lock>
 8005c42:	6833      	ldr	r3, [r6, #0]
 8005c44:	461c      	mov	r4, r3
 8005c46:	bb34      	cbnz	r4, 8005c96 <_malloc_r+0x82>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7ff ffc2 	bl	8005bd4 <sbrk_aligned>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	4604      	mov	r4, r0
 8005c54:	d14d      	bne.n	8005cf2 <_malloc_r+0xde>
 8005c56:	6834      	ldr	r4, [r6, #0]
 8005c58:	4626      	mov	r6, r4
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	d140      	bne.n	8005ce0 <_malloc_r+0xcc>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4631      	mov	r1, r6
 8005c62:	4638      	mov	r0, r7
 8005c64:	eb04 0803 	add.w	r8, r4, r3
 8005c68:	f000 f878 	bl	8005d5c <_sbrk_r>
 8005c6c:	4580      	cmp	r8, r0
 8005c6e:	d13a      	bne.n	8005ce6 <_malloc_r+0xd2>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	3503      	adds	r5, #3
 8005c74:	1a6d      	subs	r5, r5, r1
 8005c76:	f025 0503 	bic.w	r5, r5, #3
 8005c7a:	3508      	adds	r5, #8
 8005c7c:	2d0c      	cmp	r5, #12
 8005c7e:	bf38      	it	cc
 8005c80:	250c      	movcc	r5, #12
 8005c82:	4629      	mov	r1, r5
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ffa5 	bl	8005bd4 <sbrk_aligned>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d02b      	beq.n	8005ce6 <_malloc_r+0xd2>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	442b      	add	r3, r5
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	e00e      	b.n	8005cb4 <_malloc_r+0xa0>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	1b52      	subs	r2, r2, r5
 8005c9a:	d41e      	bmi.n	8005cda <_malloc_r+0xc6>
 8005c9c:	2a0b      	cmp	r2, #11
 8005c9e:	d916      	bls.n	8005cce <_malloc_r+0xba>
 8005ca0:	1961      	adds	r1, r4, r5
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	6025      	str	r5, [r4, #0]
 8005ca6:	bf18      	it	ne
 8005ca8:	6059      	strne	r1, [r3, #4]
 8005caa:	6863      	ldr	r3, [r4, #4]
 8005cac:	bf08      	it	eq
 8005cae:	6031      	streq	r1, [r6, #0]
 8005cb0:	5162      	str	r2, [r4, r5]
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f104 060b 	add.w	r6, r4, #11
 8005cba:	f000 f865 	bl	8005d88 <__malloc_unlock>
 8005cbe:	f026 0607 	bic.w	r6, r6, #7
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	1af2      	subs	r2, r6, r3
 8005cc6:	d0b6      	beq.n	8005c36 <_malloc_r+0x22>
 8005cc8:	1b9b      	subs	r3, r3, r6
 8005cca:	50a3      	str	r3, [r4, r2]
 8005ccc:	e7b3      	b.n	8005c36 <_malloc_r+0x22>
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	bf0c      	ite	eq
 8005cd4:	6032      	streq	r2, [r6, #0]
 8005cd6:	605a      	strne	r2, [r3, #4]
 8005cd8:	e7ec      	b.n	8005cb4 <_malloc_r+0xa0>
 8005cda:	4623      	mov	r3, r4
 8005cdc:	6864      	ldr	r4, [r4, #4]
 8005cde:	e7b2      	b.n	8005c46 <_malloc_r+0x32>
 8005ce0:	4634      	mov	r4, r6
 8005ce2:	6876      	ldr	r6, [r6, #4]
 8005ce4:	e7b9      	b.n	8005c5a <_malloc_r+0x46>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4638      	mov	r0, r7
 8005cec:	f000 f84c 	bl	8005d88 <__malloc_unlock>
 8005cf0:	e7a1      	b.n	8005c36 <_malloc_r+0x22>
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	e7de      	b.n	8005cb4 <_malloc_r+0xa0>
 8005cf6:	bf00      	nop
 8005cf8:	200008b4 	.word	0x200008b4

08005cfc <_realloc_r>:
 8005cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d00:	4680      	mov	r8, r0
 8005d02:	4614      	mov	r4, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	b921      	cbnz	r1, 8005d12 <_realloc_r+0x16>
 8005d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	f7ff bf81 	b.w	8005c14 <_malloc_r>
 8005d12:	b92a      	cbnz	r2, 8005d20 <_realloc_r+0x24>
 8005d14:	f7ff ff12 	bl	8005b3c <_free_r>
 8005d18:	4625      	mov	r5, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	f000 f838 	bl	8005d94 <_malloc_usable_size_r>
 8005d24:	4284      	cmp	r4, r0
 8005d26:	4607      	mov	r7, r0
 8005d28:	d802      	bhi.n	8005d30 <_realloc_r+0x34>
 8005d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d2e:	d812      	bhi.n	8005d56 <_realloc_r+0x5a>
 8005d30:	4621      	mov	r1, r4
 8005d32:	4640      	mov	r0, r8
 8005d34:	f7ff ff6e 	bl	8005c14 <_malloc_r>
 8005d38:	4605      	mov	r5, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0ed      	beq.n	8005d1a <_realloc_r+0x1e>
 8005d3e:	42bc      	cmp	r4, r7
 8005d40:	4622      	mov	r2, r4
 8005d42:	4631      	mov	r1, r6
 8005d44:	bf28      	it	cs
 8005d46:	463a      	movcs	r2, r7
 8005d48:	f7ff fed0 	bl	8005aec <memcpy>
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fef4 	bl	8005b3c <_free_r>
 8005d54:	e7e1      	b.n	8005d1a <_realloc_r+0x1e>
 8005d56:	4635      	mov	r5, r6
 8005d58:	e7df      	b.n	8005d1a <_realloc_r+0x1e>
	...

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	; (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fb fe36 	bl	80019d8 <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	200008bc 	.word	0x200008bc

08005d7c <__malloc_lock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_lock+0x8>)
 8005d7e:	f000 b811 	b.w	8005da4 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	200008c0 	.word	0x200008c0

08005d88 <__malloc_unlock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__malloc_unlock+0x8>)
 8005d8a:	f000 b80c 	b.w	8005da6 <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	200008c0 	.word	0x200008c0

08005d94 <_malloc_usable_size_r>:
 8005d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d98:	1f18      	subs	r0, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bfbc      	itt	lt
 8005d9e:	580b      	ldrlt	r3, [r1, r0]
 8005da0:	18c0      	addlt	r0, r0, r3
 8005da2:	4770      	bx	lr

08005da4 <__retarget_lock_acquire_recursive>:
 8005da4:	4770      	bx	lr

08005da6 <__retarget_lock_release_recursive>:
 8005da6:	4770      	bx	lr

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
